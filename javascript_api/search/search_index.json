{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Users can use JavaScript API to solve the following problems: To implement additional features on a website: opening forms to communicate with an online consultant (chat, inquiry) from any place on a user's website. Getting additional information about website's visitors; opening forms and callback order through sitephone; characteristics assignment (for example, the characteristic \u201cactive customer\u201d is assigned to a visitor who opened the personal area, \u201cpotential\u201d is assigned to a visitor who opened the tariffs, etc.). Getting additional data in reports: data about any user event on a website (reading a book, viewing tariffs, visiting personal area, etc.); information from any user application form. Working with events Sending user events To send a user event, use the following method: CallGear.trackEvent(category, action, name, value); Parameters: Title Type Description category text category, required parameter action text action, required parameter name text name, optional parameter value text value, optional parameter Usage example: CallGear.trackEvent('Offer', 'DownloadBook', 'CallTrackingBook', 'value'); Working with banners Checking for operators who are online To check for operators who are online, use the method: CallGear.getOperatorStatus(); Method returns true , if there is at least one operator online, otherwise it returns false . Application form To open application form, use the method: CallGear.openSiteRequestPanel(); User application form Data, received from a user application form on a website, can be sent via the following method: CallGear.addOfflineRequest(req, callback); You can only use this method when sending a form in a way that does not reload the page! There is an alternative method for all other cases. Parameters: Title Type Description req {name: myName, email: myEmail, phone: myPhone, message: myMessage, is_sale: mySale, sale_cost: myCost, group_id: 12345, form_name: formName} Description of parameters: myName - text type - visitor name, myEmail - text type - visitor email, myPhone - text type - visitor phone number, myMessage - text type - application type and other information for which there is no specific field, mySale - true - if it's a sale; false - if it's not a sale (by default), group_id - id groups, to which an application should have been sent to, myCost - transaction cost. If you need to send transaction cost, you must send value true in the parameter is_sale . form_name - is the name of the form you track. callback \"success\": <Boolean>, \"result\": {\"code\": <String>}} An argument's feature, which will be called after the server sends the result of saving the form. Optional parameters. Example: Regular application: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Application text...', group_id: 1234 }); Application, that lead to a sale: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Online order...', is_sale: true, sale_cost: '9999' }); Example using the parameter callback: CallGear.addOfflineRequest({\"name\": \"My Name Is\"}, function(o) {console.log(o);}); after an application is successfully saved in the browser console, the following result will be displayed: Object {success: true, result: null} An alternative way to send user applications You need to receive widget authentication data before sending an application, using the method JS API CallGear.getCredentials() . This method returns an object: { \"site_key\": \"VcB4qqpO1WPSopO670cAbXwAH9Ryaw75\", \"visitor_id\": 17258569, \"hit_id\": 546833568748, \"session_id\": 255544855, \"consultant_server_url\": \"https://server.callgear.com/\" //URL base part } Transfer the received data along with the rest data from the form. To add an application, make an HTTP-request to a service in a server processor. URL base cannot be hard-coded. It must be taken from the data from the paragraph 1. It may change. POST https://server.callgear.com/api/add_offline_message/ Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Form Data //data is formatted for display purposes site_key=VcB4qqpO1WPSopO670cAbXwAH9Ryaw75 &visitor_id=17258569 &hit_id=546833568748 &session_id=255544855 &name=John Smith &email=no@email.adr &phone=+79251234567 &text=Hello, world! &is_sale=true &sale_cost=10000 In a reply, a success flag will be sent ( application/json ): { \"success\": true } Example of using an alternative method to send a user application Page reload option We will assume that the embed code is already installed on a website, the jQuery library is connected and there is a feedback form. The simplest form of feedback code may look like this: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"E-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='submit' /> </form> In order to send an application, the form code needs to be finalized: to add service fields and a handler to the \"Send\" button: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Enter a name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter a phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter an e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"formSubmit()\"/> <input type=\"hidden\" name='site_key'/> <input type=\"hidden\" name='visitor_id'/> <input type=\"hidden\" name='hit_id'/> <input type=\"hidden\" name='session_id'/> <input type=\"hidden\" name='consultant_server_url'/> </form> You need to write the function formSubmit() in a page code or in a separate JS-file. This function is called every time you click on the \"Send\" button: function formSubmit() { var credentials = CallGear.getCredentials(); for (var field in credentials) { if (credentials.hasOwnProperty(field)){ $('[name='+field+']').val(credentials[field]); } } $('#myform').submit(); } This code receives service information, saves it in invisible service fields of the form and sends the form to the server. Next, you need to modify the code that is responsible for processing the application on the server. In our case, this code is in the send.php file: <? /* Here is the default code associated with processing an application on the server side. For example, sending letters, or saving to a database. */ ?> <? $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //Unchanged value from the site_key service field 'visitor_id' => $_POST['visitor_id'], //Unchanged value from the visitor_id service field 'hit_id' => $_POST['hit_id'], //Unchanged value from the hit_id service field 'session_id' => $_POST['session_id'], //Unchanged value from the session_id service field 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to transfer a sale cost, then is_sale must equal true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); print $options['http']['content']; $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success'] === false) { /* There may be actions in case sending of an application fails. */ } ?> Example with AJAX-request HTML-markup of a simple form: <form id='myform2'> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"sendAjaxSubmit()\"/> </form> AJAX-request sending JS-code: function sendAjaxSubmit() { /* This can be a check of the required filled in fields, validation of the phone number and other checks. */ $.ajax({ url: 'sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, }) } Processing the received request PHP-code: <? /* Code for processing incoming data, saving to the database or sending an application by email. */ $success = true; /* The variable defines whether or not the application was saved. */ if ($success) { print 'Application successfully saved'; } else { print 'An unexpected error has occurred'; } ?> In order to send an application in case of sending an application with an AJAX request, you do not need to modify the HTML-form. It is necessary to modify the JS code so that service information is received before sending the request: function sendAjaxSubmit() { /* Here you can check the required filled in fields, validate the phone number and make other checks. */ $.ajax({ url: '/sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, beforeSend: function(jqXHR, settings) { var credentials = CallGear.getCredentials(); settings.data += '&' + $.param(credentials); } }) } The code needs to be executed on the server. In this case, it is in a sendAjax.php file: <? /* Here is the default code associated with processing an application on the server side. For example, sending letters, or saving to a database. */ ?> <? $success = true; /* Check that everything is done correctly. */ if ($success) { $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //Unchanged value from the service field site_key 'visitor_id' => $_POST['visitor_id'], //Unchanged value from the service field visitor_id 'hit_id' => $_POST['hit_id'], //Unchanged value from the service field hit_id 'session_id' => $_POST['session_id'], //Unchanged value from the service field session_id 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to transfer a sale cost, then is_sale must equal true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success' === false]) { /* Processing the case if sending of an application failed. */ } else { print 'Application successfully saved.'; } } else { print 'An unexpected error has occurred'; } ?> Sitephone form To open our standard sitephone form, use the method: CallGearWidget.openSitePhonePanel(); Captcha for sitephone forms CallGear.Captcha.get_captcha(callback); Parameters: Title Type Description callback {key: myKey, url: myURL} Returning reply: myKey - captcha key, myURL - picture address. Example: CallGear.Captcha.get_captcha(function(resp){console.log(resp)}); Changing phone number mask for sitephone form In order to replace the standard mask for entering the number in the sitephone and allow entering numbers in other formats, add a line to the insert code: __cs.push([\"setUIPhoneMaskFormat\", '1 () __-__']); As the second parameter, you should send a format of a mask, displayed on the sitephone. Sitephone user form In addition to standard widgets, you can use any form you want to call back on the site. To do so, you need to embed the callback method call into your form using the JS API: CallGearWidget.sitePhoneCall({captcha_key: <captcha ID>, captcha_value: <captcha value>, phone:<phone number>, delayed_call_time:<call time>, group_id:<group id>}, callback); Parameters: Title Type Description captcha_key text Captcha ID. Required, if captcha is switched on in the callback settings. captcha_value text Captcha value (what a visitor entered in the form): take myURL result from the method Captcha.get_captcha() , click a link, see 4 figures. Required, if captcha is switched on in the callback settings. phone text Visitor phone number. Required. delayed_call_time text UTC call time in milliseconds. group_id text Employees group ID, where a call will be directed to. callback {\"success\": <Boolean>, \"result\":{status: <Integer>, code: <String>}} Returning reply, optional (but advised). If it's not specified, the feature will work similarly to a call from the standard sitephone form and will display a pop-up notification with the result. Parameters: success: true - successful, false - failed; result - call results: status - call status. Possible statuses: Code Value 0 successful, call sent to platform 1 captcha is incorrect 2 callback processing scenario is not specified 3 platform error 4 limit of calls per minute has been exceeded (up to 10 calls) Example of usage CallGearWidget.sitePhoneCall({captcha_key: 'jwgtGYZDYTA...4pBEWRx', captcha_value: '8315', phone:'79101234567', delayed_call_time: 1508927547000 , group_id: '16587'}, function(resp){console.log(resp)}); Chat form When the following method is called, if there are operators online, a chat form opens: CallGear.openChatWindow(); If no operators are online, the application form opens. Working with visitors Getting visitor ID To get visitor ID, use the following method: CallGear.getVisitorId(); Getting user session ID To get user session ID, use the following method: CallGear.getSessionId() Adding visitor information To add visitor information, use the following method: CallGear.addVisitorInfo({name:'myName', phone:'myPhone', email:'myEmail'}); You can use this method only if you send the form in a way that does not reload the page! For other cases, there is an alternative method. To call a method successfully, at least one parameter must be filled. All other parameters will be ignored. Parameters: Title Parameters Description req {name: myName, email: myEmail, phone: myPhone} myName - text type - visitor name (rewritable) myEmail - text type - visitor email (unique one is added) myPhone - text type - visitor phone number (unique one is added) callback \"success\": <Boolean> A feature of a single argument, which will be called after the server sends the result of saving the form. Optional parameter. Example: CallGear.addVisitorInfo({name:'Test', phone:'79000000000', email:'myemail@axample.com'},function(resp){console.log(resp)}) Alternative way to add visitor information We will proceed from the fact that a website already has an embed code, the jQuery library is connected Before sending information about the visitor, you need to obtain authentication data using the JS API method CallGear.getCredentials() . Method returns an object: { \"site_key\": \"VcB4qqpO1WPSopO670cAbXwAH9Ryaw75\", \"visitor_id\": 17258569, \"hit_id\": 546833568748, \"session_id\": 255544855, \"consultant_server_url\": \"https://server.callgear.com/\" // We don't need this URL } Transfer the received data along with other data from the form. Parameters: url - https://tracker.callgear.com/vc/s/ parameters from CallGear.getCredentials request(): sk=site_key ci=callgear_id hi=hit_id vp=phone number vn=name ve=email s=1 removes the output of system fields in the reply (only success: true returns) Example https://tracker.callgear.com/vc/s/?sk=nS5lMAgURPyUQXVyBgguFy0AvIRdbfdy&ci=2032047566.3117192853.1555675484&hi=9228054013&vn=new_user Adding a feature to a visitor To add feature or its value, use the method: CallGear.setProperty(name, value); Parameters: Title Type Description name text Title of the feature to be assigned to a visitor value text Feature value (optional) Examples: The feature \"Visitor type\" with value \"Potential\" is assigned in the following way: CallGear.setProperty('Visitor type', 'Potential'); The feature \"Current customer\" without value is assigned in the following way: CallGear.setProperty('Current customer'); Checking whether or not visitor has a feature To check whether or not visitor has a feature, use the following method: CallGear.hasProperty(name, callback); Parameters: Title Type Description name text Title of a feature to be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name assigned false - feature name not assigned Example: CallGear.hasProperty('Current customer', callback); CallGear.hasProperty('Current customer', function(resp){console.log(resp)}); Getting visitor features values To get visitor features values use the following method: CallGear.getProperty(name, callback); Parameters: Title Type Description name text Title of a feature to be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name , false - the name feature not assigned Example: CallGear.getProperty('Customer type', callback); CallGear.getProperty('Current customer', function(resp){console.log(resp)}); Deleting visitor features To delete visitor feature, use the following method: CallGear.deleteProperty(name); Parameters: Title Type Description name text Title of a feature, that's to be deleted Example: CallGear.deleteProperty('visitor type'); Number substitution Number substitution in dynamic blocks In order to enable number substitution in dynamically added blocks, an additional line must be added to the insert code: __cs.push([\"setDynamicalReplacement\", true]); or CallGear.push([\"setDynamicalReplacement\", true]); Number substitution management When a number substitution is necessary only under certain conditions, for example, only for visitors from Moscow, you need to redefine the feature that controls the number substitution, window .__ cs_onReplacePhones (phones) . It works as follows: if it returns true , the substitution will be performed as if the feature had not been redefined, if it returns false , the substitution will not be performed. The function is created at the time of the service code initialization and by default has the form: window.__cs_onReplacePhones = function(phones) {return true;}; If you do not need to manage the substitution, then you do not need to redefine the feature. If numbers need to be substituted only under certain conditions, then this feature must be redefined by adding necessary conditions into the body Getting numbers, given to a visitor If a customer needs to get a list of all the numbers issued to a website visitor, you can use the following feature: CallGear.getPhones(); The reply will return a bulk of objects similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone] number number=XXXXXXXXXXX Getting a list of dynamic tracking numbers reserved for a visitor If a customer needs to get a list of dynamic tracking numbers reserved for a visitor, you can use the following feature: CallGear.getDTPhones(); This feature will return null in the case no dynamic tracking numbers are reserved for a visitor. If there are several reserved numbers, then a bulk of objects will return, similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone]","title":"JS API Reference"},{"location":"#working-with-events","text":"","title":"Working with events"},{"location":"#sending-user-events","text":"To send a user event, use the following method: CallGear.trackEvent(category, action, name, value); Parameters: Title Type Description category text category, required parameter action text action, required parameter name text name, optional parameter value text value, optional parameter Usage example: CallGear.trackEvent('Offer', 'DownloadBook', 'CallTrackingBook', 'value');","title":"Sending user events"},{"location":"#working-with-banners","text":"","title":"Working with banners"},{"location":"#checking-for-operators-who-are-online","text":"To check for operators who are online, use the method: CallGear.getOperatorStatus(); Method returns true , if there is at least one operator online, otherwise it returns false .","title":"Checking for operators who are online"},{"location":"#application-form","text":"To open application form, use the method: CallGear.openSiteRequestPanel(); User application form Data, received from a user application form on a website, can be sent via the following method: CallGear.addOfflineRequest(req, callback); You can only use this method when sending a form in a way that does not reload the page! There is an alternative method for all other cases. Parameters: Title Type Description req {name: myName, email: myEmail, phone: myPhone, message: myMessage, is_sale: mySale, sale_cost: myCost, group_id: 12345, form_name: formName} Description of parameters: myName - text type - visitor name, myEmail - text type - visitor email, myPhone - text type - visitor phone number, myMessage - text type - application type and other information for which there is no specific field, mySale - true - if it's a sale; false - if it's not a sale (by default), group_id - id groups, to which an application should have been sent to, myCost - transaction cost. If you need to send transaction cost, you must send value true in the parameter is_sale . form_name - is the name of the form you track. callback \"success\": <Boolean>, \"result\": {\"code\": <String>}} An argument's feature, which will be called after the server sends the result of saving the form. Optional parameters. Example: Regular application: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Application text...', group_id: 1234 }); Application, that lead to a sale: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Online order...', is_sale: true, sale_cost: '9999' }); Example using the parameter callback: CallGear.addOfflineRequest({\"name\": \"My Name Is\"}, function(o) {console.log(o);}); after an application is successfully saved in the browser console, the following result will be displayed: Object {success: true, result: null} An alternative way to send user applications You need to receive widget authentication data before sending an application, using the method JS API CallGear.getCredentials() . This method returns an object: { \"site_key\": \"VcB4qqpO1WPSopO670cAbXwAH9Ryaw75\", \"visitor_id\": 17258569, \"hit_id\": 546833568748, \"session_id\": 255544855, \"consultant_server_url\": \"https://server.callgear.com/\" //URL base part } Transfer the received data along with the rest data from the form. To add an application, make an HTTP-request to a service in a server processor. URL base cannot be hard-coded. It must be taken from the data from the paragraph 1. It may change. POST https://server.callgear.com/api/add_offline_message/ Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Form Data //data is formatted for display purposes site_key=VcB4qqpO1WPSopO670cAbXwAH9Ryaw75 &visitor_id=17258569 &hit_id=546833568748 &session_id=255544855 &name=John Smith &email=no@email.adr &phone=+79251234567 &text=Hello, world! &is_sale=true &sale_cost=10000 In a reply, a success flag will be sent ( application/json ): { \"success\": true }","title":"Application form"},{"location":"#example-of-using-an-alternative-method-to-send-a-user-application","text":"Page reload option We will assume that the embed code is already installed on a website, the jQuery library is connected and there is a feedback form. The simplest form of feedback code may look like this: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"E-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='submit' /> </form> In order to send an application, the form code needs to be finalized: to add service fields and a handler to the \"Send\" button: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Enter a name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter a phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter an e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"formSubmit()\"/> <input type=\"hidden\" name='site_key'/> <input type=\"hidden\" name='visitor_id'/> <input type=\"hidden\" name='hit_id'/> <input type=\"hidden\" name='session_id'/> <input type=\"hidden\" name='consultant_server_url'/> </form> You need to write the function formSubmit() in a page code or in a separate JS-file. This function is called every time you click on the \"Send\" button: function formSubmit() { var credentials = CallGear.getCredentials(); for (var field in credentials) { if (credentials.hasOwnProperty(field)){ $('[name='+field+']').val(credentials[field]); } } $('#myform').submit(); } This code receives service information, saves it in invisible service fields of the form and sends the form to the server. Next, you need to modify the code that is responsible for processing the application on the server. In our case, this code is in the send.php file: <? /* Here is the default code associated with processing an application on the server side. For example, sending letters, or saving to a database. */ ?> <? $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //Unchanged value from the site_key service field 'visitor_id' => $_POST['visitor_id'], //Unchanged value from the visitor_id service field 'hit_id' => $_POST['hit_id'], //Unchanged value from the hit_id service field 'session_id' => $_POST['session_id'], //Unchanged value from the session_id service field 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to transfer a sale cost, then is_sale must equal true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); print $options['http']['content']; $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success'] === false) { /* There may be actions in case sending of an application fails. */ } ?> Example with AJAX-request HTML-markup of a simple form: <form id='myform2'> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"sendAjaxSubmit()\"/> </form> AJAX-request sending JS-code: function sendAjaxSubmit() { /* This can be a check of the required filled in fields, validation of the phone number and other checks. */ $.ajax({ url: 'sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, }) } Processing the received request PHP-code: <? /* Code for processing incoming data, saving to the database or sending an application by email. */ $success = true; /* The variable defines whether or not the application was saved. */ if ($success) { print 'Application successfully saved'; } else { print 'An unexpected error has occurred'; } ?> In order to send an application in case of sending an application with an AJAX request, you do not need to modify the HTML-form. It is necessary to modify the JS code so that service information is received before sending the request: function sendAjaxSubmit() { /* Here you can check the required filled in fields, validate the phone number and make other checks. */ $.ajax({ url: '/sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, beforeSend: function(jqXHR, settings) { var credentials = CallGear.getCredentials(); settings.data += '&' + $.param(credentials); } }) } The code needs to be executed on the server. In this case, it is in a sendAjax.php file: <? /* Here is the default code associated with processing an application on the server side. For example, sending letters, or saving to a database. */ ?> <? $success = true; /* Check that everything is done correctly. */ if ($success) { $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //Unchanged value from the service field site_key 'visitor_id' => $_POST['visitor_id'], //Unchanged value from the service field visitor_id 'hit_id' => $_POST['hit_id'], //Unchanged value from the service field hit_id 'session_id' => $_POST['session_id'], //Unchanged value from the service field session_id 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to transfer a sale cost, then is_sale must equal true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success' === false]) { /* Processing the case if sending of an application failed. */ } else { print 'Application successfully saved.'; } } else { print 'An unexpected error has occurred'; } ?>","title":"Example of using an alternative method to send a user application"},{"location":"#sitephone-form","text":"To open our standard sitephone form, use the method: CallGearWidget.openSitePhonePanel(); Captcha for sitephone forms CallGear.Captcha.get_captcha(callback); Parameters: Title Type Description callback {key: myKey, url: myURL} Returning reply: myKey - captcha key, myURL - picture address. Example: CallGear.Captcha.get_captcha(function(resp){console.log(resp)}); Changing phone number mask for sitephone form In order to replace the standard mask for entering the number in the sitephone and allow entering numbers in other formats, add a line to the insert code: __cs.push([\"setUIPhoneMaskFormat\", '1 () __-__']); As the second parameter, you should send a format of a mask, displayed on the sitephone. Sitephone user form In addition to standard widgets, you can use any form you want to call back on the site. To do so, you need to embed the callback method call into your form using the JS API: CallGearWidget.sitePhoneCall({captcha_key: <captcha ID>, captcha_value: <captcha value>, phone:<phone number>, delayed_call_time:<call time>, group_id:<group id>}, callback); Parameters: Title Type Description captcha_key text Captcha ID. Required, if captcha is switched on in the callback settings. captcha_value text Captcha value (what a visitor entered in the form): take myURL result from the method Captcha.get_captcha() , click a link, see 4 figures. Required, if captcha is switched on in the callback settings. phone text Visitor phone number. Required. delayed_call_time text UTC call time in milliseconds. group_id text Employees group ID, where a call will be directed to. callback {\"success\": <Boolean>, \"result\":{status: <Integer>, code: <String>}} Returning reply, optional (but advised). If it's not specified, the feature will work similarly to a call from the standard sitephone form and will display a pop-up notification with the result. Parameters: success: true - successful, false - failed; result - call results: status - call status. Possible statuses: Code Value 0 successful, call sent to platform 1 captcha is incorrect 2 callback processing scenario is not specified 3 platform error 4 limit of calls per minute has been exceeded (up to 10 calls) Example of usage CallGearWidget.sitePhoneCall({captcha_key: 'jwgtGYZDYTA...4pBEWRx', captcha_value: '8315', phone:'79101234567', delayed_call_time: 1508927547000 , group_id: '16587'}, function(resp){console.log(resp)});","title":"Sitephone form"},{"location":"#chat-form","text":"When the following method is called, if there are operators online, a chat form opens: CallGear.openChatWindow(); If no operators are online, the application form opens.","title":"Chat form"},{"location":"#working-with-visitors","text":"","title":"Working with visitors"},{"location":"#getting-visitor-id","text":"To get visitor ID, use the following method: CallGear.getVisitorId();","title":"Getting visitor ID"},{"location":"#getting-user-session-id","text":"To get user session ID, use the following method: CallGear.getSessionId()","title":"Getting user session ID"},{"location":"#adding-visitor-information","text":"To add visitor information, use the following method: CallGear.addVisitorInfo({name:'myName', phone:'myPhone', email:'myEmail'}); You can use this method only if you send the form in a way that does not reload the page! For other cases, there is an alternative method. To call a method successfully, at least one parameter must be filled. All other parameters will be ignored. Parameters: Title Parameters Description req {name: myName, email: myEmail, phone: myPhone} myName - text type - visitor name (rewritable) myEmail - text type - visitor email (unique one is added) myPhone - text type - visitor phone number (unique one is added) callback \"success\": <Boolean> A feature of a single argument, which will be called after the server sends the result of saving the form. Optional parameter. Example: CallGear.addVisitorInfo({name:'Test', phone:'79000000000', email:'myemail@axample.com'},function(resp){console.log(resp)}) Alternative way to add visitor information We will proceed from the fact that a website already has an embed code, the jQuery library is connected Before sending information about the visitor, you need to obtain authentication data using the JS API method CallGear.getCredentials() . Method returns an object: { \"site_key\": \"VcB4qqpO1WPSopO670cAbXwAH9Ryaw75\", \"visitor_id\": 17258569, \"hit_id\": 546833568748, \"session_id\": 255544855, \"consultant_server_url\": \"https://server.callgear.com/\" // We don't need this URL } Transfer the received data along with other data from the form. Parameters: url - https://tracker.callgear.com/vc/s/ parameters from CallGear.getCredentials request(): sk=site_key ci=callgear_id hi=hit_id vp=phone number vn=name ve=email s=1 removes the output of system fields in the reply (only success: true returns) Example https://tracker.callgear.com/vc/s/?sk=nS5lMAgURPyUQXVyBgguFy0AvIRdbfdy&ci=2032047566.3117192853.1555675484&hi=9228054013&vn=new_user","title":"Adding visitor information"},{"location":"#adding-a-feature-to-a-visitor","text":"To add feature or its value, use the method: CallGear.setProperty(name, value); Parameters: Title Type Description name text Title of the feature to be assigned to a visitor value text Feature value (optional) Examples: The feature \"Visitor type\" with value \"Potential\" is assigned in the following way: CallGear.setProperty('Visitor type', 'Potential'); The feature \"Current customer\" without value is assigned in the following way: CallGear.setProperty('Current customer');","title":"Adding a feature to a visitor"},{"location":"#checking-whether-or-not-visitor-has-a-feature","text":"To check whether or not visitor has a feature, use the following method: CallGear.hasProperty(name, callback); Parameters: Title Type Description name text Title of a feature to be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name assigned false - feature name not assigned Example: CallGear.hasProperty('Current customer', callback); CallGear.hasProperty('Current customer', function(resp){console.log(resp)});","title":"Checking whether or not visitor has a feature"},{"location":"#getting-visitor-features-values","text":"To get visitor features values use the following method: CallGear.getProperty(name, callback); Parameters: Title Type Description name text Title of a feature to be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name , false - the name feature not assigned Example: CallGear.getProperty('Customer type', callback); CallGear.getProperty('Current customer', function(resp){console.log(resp)});","title":"Getting visitor features values"},{"location":"#deleting-visitor-features","text":"To delete visitor feature, use the following method: CallGear.deleteProperty(name); Parameters: Title Type Description name text Title of a feature, that's to be deleted Example: CallGear.deleteProperty('visitor type');","title":"Deleting visitor features"},{"location":"#number-substitution","text":"","title":"Number substitution"},{"location":"#number-substitution-in-dynamic-blocks","text":"In order to enable number substitution in dynamically added blocks, an additional line must be added to the insert code: __cs.push([\"setDynamicalReplacement\", true]); or CallGear.push([\"setDynamicalReplacement\", true]);","title":"Number substitution in dynamic blocks"},{"location":"#number-substitution-management","text":"When a number substitution is necessary only under certain conditions, for example, only for visitors from Moscow, you need to redefine the feature that controls the number substitution, window .__ cs_onReplacePhones (phones) . It works as follows: if it returns true , the substitution will be performed as if the feature had not been redefined, if it returns false , the substitution will not be performed. The function is created at the time of the service code initialization and by default has the form: window.__cs_onReplacePhones = function(phones) {return true;}; If you do not need to manage the substitution, then you do not need to redefine the feature. If numbers need to be substituted only under certain conditions, then this feature must be redefined by adding necessary conditions into the body","title":"Number substitution management"},{"location":"#getting-numbers-given-to-a-visitor","text":"If a customer needs to get a list of all the numbers issued to a website visitor, you can use the following feature: CallGear.getPhones(); The reply will return a bulk of objects similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone] number number=XXXXXXXXXXX","title":"Getting numbers, given to a visitor"},{"location":"#getting-a-list-of-dynamic-tracking-numbers-reserved-for-a-visitor","text":"If a customer needs to get a list of dynamic tracking numbers reserved for a visitor, you can use the following feature: CallGear.getDTPhones(); This feature will return null in the case no dynamic tracking numbers are reserved for a visitor. If there are several reserved numbers, then a bulk of objects will return, similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone]","title":"Getting a list of dynamic tracking numbers reserved for a visitor"},{"location":"hand%20bk/create_widget/","text":"ViewController ViewController - is a feature, inside of which widgets are made, the logic of their display is processed, widget methods are called and events are processed. Before using ViewController register it. To do so use the method CallGear.UI.registerViewController() . registerViewController This method has two parameters: name viewcontroller feature ViewController The following ViewController names are allowed to register in the system: sitephone call_generator offline_message_generator personal_form registerViewController ensures that the ViewController feature is called after three conditions are met: Widget styles are uploaded, Widget settings are uploaded, Widget templates are uploaded. Settings and templates are available inside the ViewController feature as parameters. To create widgets inside the ViewController feature, use the method CallGear.UI.createWidget() Example of creating ViewController var SitephoneViewController = function(settings, tpls) { console.log('Environment for sitephone widget is ready'); var sitephone = CallGear.UI.createWidget(...) } CallGear.UI.registerViewController('sitephone', SitephoneViewController) The ViewController of a sitephone starts once when the page loads. The ViewController of the lead generator forms starts every time the corresponding form is displayed.","title":"ViewController"},{"location":"hand%20bk/create_widget/#viewcontroller","text":"ViewController - is a feature, inside of which widgets are made, the logic of their display is processed, widget methods are called and events are processed. Before using ViewController register it. To do so use the method CallGear.UI.registerViewController() .","title":"ViewController"},{"location":"hand%20bk/create_widget/#registerviewcontroller","text":"This method has two parameters: name viewcontroller feature ViewController","title":"registerViewController"},{"location":"hand%20bk/create_widget/#the-following-viewcontroller-names-are-allowed-to-register-in-the-system","text":"sitephone call_generator offline_message_generator personal_form registerViewController ensures that the ViewController feature is called after three conditions are met: Widget styles are uploaded, Widget settings are uploaded, Widget templates are uploaded. Settings and templates are available inside the ViewController feature as parameters. To create widgets inside the ViewController feature, use the method CallGear.UI.createWidget()","title":"The following ViewController names are allowed to register in the system:"},{"location":"hand%20bk/create_widget/#example-of-creating-viewcontroller","text":"var SitephoneViewController = function(settings, tpls) { console.log('Environment for sitephone widget is ready'); var sitephone = CallGear.UI.createWidget(...) } CallGear.UI.registerViewController('sitephone', SitephoneViewController) The ViewController of a sitephone starts once when the page loads. The ViewController of the lead generator forms starts every time the corresponding form is displayed.","title":"Example of creating ViewController"},{"location":"hand%20bk/widget/","text":"Widget Widget is a part of the user interface, which contains its own structure and functionality. Widget \u2014 base class for all the CallGear widgets. Methods show() Widget display method \u2014 by default removes the callgear-widget-hidden class. The method can be overridden when creating a widget. hide() Widget hide method \u2014 by default adds callgear-widget-hidden class. The method can be overridden when creating a widget. render() Inserting and creating a dom element on the page. destroy() Removing a dom element from the page. getEl(selector?: String) Returns a link to a dom element. selector is an optional parameter that is passed to the method to search for an element with a specific selector inside the widget element. If it is not passed, then it will return the entire widget element. on(eventName: string, callback: Function) Subscribing to widget events. eventName - name of the event interaction with which occurs; callback - feature that will be called when an event occurs. un(eventName: string, callback: Function) Unsubscribing from widget events. eventName - name of the event interaction with which occurs; callback - feature that was transferred when subscribing to the event. Events beforeshow Event that happens before the show method is executed show Event that happens after the show method is executed beforehide Event that happens before the hide method is executed hide Event that happens after the hide method is executed beforerender Event that happens before the render method is executed render Event that happens after the render method is executed beforedestroy Event that happens before the destroy method is executed Creating widgets Widgets are created by calling a feature CallGear.UI.createWidget . The first parameter is the name of the widget. The second parameter is the configuration object. Widgets have a single base class and sub classes derived from it. Widget names list: personal_form call_generator offline_message_generator sitephone If a widget name is not in the list of widget names, then the created object will be an instance of the base class. CallGear.UI.createWidget('sitephone_label', { settings: settings, template: tpls['sitephone_label'] }) Otherwise, the object of the corresponding sub class will be returned. CallGear.UI.createWidget('sitephone', { settings: settings, template: tpls['sitephone'] }) The createWidget method is intended to be called inside the viewcontroller.","title":"Widget"},{"location":"hand%20bk/widget/#widget","text":"Widget is a part of the user interface, which contains its own structure and functionality. Widget \u2014 base class for all the CallGear widgets.","title":"Widget"},{"location":"hand%20bk/widget/#methods","text":"","title":"Methods"},{"location":"hand%20bk/widget/#show","text":"Widget display method \u2014 by default removes the callgear-widget-hidden class. The method can be overridden when creating a widget.","title":"show()"},{"location":"hand%20bk/widget/#hide","text":"Widget hide method \u2014 by default adds callgear-widget-hidden class. The method can be overridden when creating a widget.","title":"hide()"},{"location":"hand%20bk/widget/#render","text":"Inserting and creating a dom element on the page.","title":"render()"},{"location":"hand%20bk/widget/#destroy","text":"Removing a dom element from the page.","title":"destroy()"},{"location":"hand%20bk/widget/#getelselector-string","text":"Returns a link to a dom element. selector is an optional parameter that is passed to the method to search for an element with a specific selector inside the widget element. If it is not passed, then it will return the entire widget element.","title":"getEl(selector?: String)"},{"location":"hand%20bk/widget/#oneventname-string-callback-function","text":"Subscribing to widget events. eventName - name of the event interaction with which occurs; callback - feature that will be called when an event occurs.","title":"on(eventName: string, callback: Function)"},{"location":"hand%20bk/widget/#uneventname-string-callback-function","text":"Unsubscribing from widget events. eventName - name of the event interaction with which occurs; callback - feature that was transferred when subscribing to the event.","title":"un(eventName: string, callback: Function)"},{"location":"hand%20bk/widget/#events","text":"","title":"Events"},{"location":"hand%20bk/widget/#beforeshow","text":"Event that happens before the show method is executed","title":"beforeshow"},{"location":"hand%20bk/widget/#show_1","text":"Event that happens after the show method is executed","title":"show"},{"location":"hand%20bk/widget/#beforehide","text":"Event that happens before the hide method is executed","title":"beforehide"},{"location":"hand%20bk/widget/#hide_1","text":"Event that happens after the hide method is executed","title":"hide"},{"location":"hand%20bk/widget/#beforerender","text":"Event that happens before the render method is executed","title":"beforerender"},{"location":"hand%20bk/widget/#render_1","text":"Event that happens after the render method is executed","title":"render"},{"location":"hand%20bk/widget/#beforedestroy","text":"Event that happens before the destroy method is executed","title":"beforedestroy"},{"location":"hand%20bk/widget/#creating-widgets","text":"Widgets are created by calling a feature CallGear.UI.createWidget . The first parameter is the name of the widget. The second parameter is the configuration object. Widgets have a single base class and sub classes derived from it. Widget names list: personal_form call_generator offline_message_generator sitephone If a widget name is not in the list of widget names, then the created object will be an instance of the base class. CallGear.UI.createWidget('sitephone_label', { settings: settings, template: tpls['sitephone_label'] }) Otherwise, the object of the corresponding sub class will be returned. CallGear.UI.createWidget('sitephone', { settings: settings, template: tpls['sitephone'] }) The createWidget method is intended to be called inside the viewcontroller.","title":"Creating widgets"},{"location":"manual/code/","text":"Insert code To replace the default widget files, use the insert code method applyWidgetsOptions. var widgetsOptions = {/*...*/}; __cs.push(['applyWidgetsOptions', widgetsOptions]); An argument of the method is an object that describes the url-address for widget components depending on the type of the device. The object has the form: var widgetsOptions = { 'personal_form': { desktop: { js: '//callgear.com/personal_form.js', css: '//callgear.com/personal_form_desktop.css', tpls: { \"personal_form\": '//callgear.com/personal_form.html' } } }/*, ... */ }; This object is divided on the first level by viewcontrollers names , on the second by the type of device (desktop, tablet, mobile).","title":"Code"},{"location":"manual/code/#insert-code","text":"To replace the default widget files, use the insert code method applyWidgetsOptions. var widgetsOptions = {/*...*/}; __cs.push(['applyWidgetsOptions', widgetsOptions]); An argument of the method is an object that describes the url-address for widget components depending on the type of the device. The object has the form: var widgetsOptions = { 'personal_form': { desktop: { js: '//callgear.com/personal_form.js', css: '//callgear.com/personal_form_desktop.css', tpls: { \"personal_form\": '//callgear.com/personal_form.html' } } }/*, ... */ }; This object is divided on the first level by viewcontrollers names , on the second by the type of device (desktop, tablet, mobile).","title":"Insert code"},{"location":"manual/events/","text":"Events There are on and un methods for responding to server commands or interacting with a page widget. Via these methods, subscribing and unsubscribing from widget events is performed. An example of interaction with events: var onRender = function () { sitephone.show(); }; //subscribe to an event sitephone.on('render', onRender); //Unsubscribe from an event sitephone.un('render', onRender); Cancelling method calls via events before{methodName} There are events that precede a method calls: - beforeshow - beforehide - beforedestroy - beforerender If you return these events in an explicit form false in a processor, methods of the same will not be called Example: sitephone.on('beforeshow', function () { return !customWidget.isVisible(); }); sitephone.show(); In this example, the show method will not be called if the processor returns false .","title":"Events"},{"location":"manual/events/#events","text":"There are on and un methods for responding to server commands or interacting with a page widget. Via these methods, subscribing and unsubscribing from widget events is performed. An example of interaction with events: var onRender = function () { sitephone.show(); }; //subscribe to an event sitephone.on('render', onRender); //Unsubscribe from an event sitephone.un('render', onRender);","title":"Events"},{"location":"manual/events/#cancelling-method-calls-via-events-beforemethodname","text":"There are events that precede a method calls: - beforeshow - beforehide - beforedestroy - beforerender If you return these events in an explicit form false in a processor, methods of the same will not be called Example: sitephone.on('beforeshow', function () { return !customWidget.isVisible(); }); sitephone.show(); In this example, the show method will not be called if the processor returns false .","title":"Cancelling method calls via events before{methodName}"},{"location":"manual/examples/","text":"Applying your own styles and templates through applyWidgetOptions To apply your own styles and templates you need to add links that lead to them into the insert code. You can do so by using the structure __cs.push(['applyWidgetsOptions', {...}]) . In the method, specify the links to the components (js, css, templates) of the widgets, the type of device and the name of the widget. Type of device: desktop mobile List of widget names: personal_form call_generator offline_message_generator sitephone consultant An example of using custom js, css and tpls for a desktop call generator. <head> <script> var __cs = __cs || []; ... __cs.push([\u201capplyWidgetsOptions\u201d, { // name of the widget, to which we apply customization \u201ccall_generator\u201d: { // type of device, to which we apply customization desktop: { js: \u201c//app.callgear.com/widget/js/lead/desktop/call_generator.min.js\u201d, //customized JS-file css: \u201c//app.callgear.com/widget/css/lead/desktop/lead_call_generator_desktop.css\u201d, //customized CSS-file tpls: { \"call_generator\": \u201c//app.callgear.com/widget/html/lead/desktop/call_generator.html\u201d //customized widget template } } } }]); </script> <script type=\"text/javascript\" async src=\"//app.callgear.com/static/cs.min.js\"></script> </head> Customization is applied to all widgets matching the specified name. For example, you have several forms of a call generator configured and you want to change their appearance. After you specify widget's name call_generator in the structure, changes will be applied to all the forms of a call generator. Adding a checkbox to link to a personal agreement on the example of an application generator To add a checkbox to an application generator, you need to add the method beforeViewControllerRun in the structure applyWidgetsOptions , and change the features is_personal_info_enabled and personal_info_tex\u2019 in the object settings . By default \u2018is_personal_info_enabled\u2019 = false , \u2018personal_info_text\u2019 = \"I agree with the processing of personal data\" . __cs.push(['applyWidgetsOptions', { 'offline_message_generator': { desktop: { beforeViewControllerRun: function (settings, tpls) { settings['is_personal_info_enabled'] = true; settings['personal_info_text'] = 'I agree with the processing of personal data'; return {settings: settings, tpls: tpls}; // for further correct operation of the widget you need to return the objects \u2018settings\u2019 and \u2018tpls\u2019 } } } }); The resulting structure is added to the CallGear insert code on the website. If you try to send an application when the checkbox is removed, the checkbox will turn red and the application will not be sent until the checkbox is selected. Using .callgear-widget to change widget Consider the use of .callgear-widget on the example of how to change the position of the widget / hide the widget on the page. .callgear-widget - the base class of all widgets, is an indicator that elements with this class belong to the widget. By default, the class is empty and does not contain a style declaration block. Adding styles to a page by connecting a *.css file To add styles to a page, you can add them to a file with extension *.css , for example style.css and then connect then through <link rel=\"stylesheet\" href=\"style.css\"> , where href is a link that leads to the style.css file. <html> <head> ... <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> ... </body> </html> Add styles to a page using the tag <style></style> To add styles to a page using the tag <style></style> , just define this tag in your html file, and set style rules inside this tag. Examples of using .callgear-widget with the tag <style></style> Hiding widget on a page <html> <head> ... <style> .callgear-widget { display: none; } </style> </head> <body> ... </body> </html> Change of position consultant / sitephone: <html> <head> ... <style> .callgear-widget { justify-content: flex-start | center | flex-end; // widget vertical position on top | in the middle | on the bottom left: 0; // widget position on the left right: 0; // widget position on the right } </style> </head> <body> ... </body> </html> Change the position of the lead generator: <html> <head> ... <style> .callgear-widget { align-items: flex-start | center | flex-end; // widget vertical position on top | in the middle | on the bottom justify-content: flex-start | center | flex-end; // widget horizontal position on the left| in the center | on the right } </style> </head> <body> ... </body> </html> Calling website visitor after sending an application through the lead generator Consider using the method CallGearWidget.sitephoneCall() with the lead generator form for making calls after sending applications. You need to add the method afterViewControllerRun into the structure applyWidgetsOptions , subscribe to the event leadsubmit , inside of which we will call the method CallGearWidget.sitePhoneCall with data from the application generator form. __cs.push(['applyWidgetsOptions', { // name of the widget, to which we apply customization 'offline_message_generator': { // type of device, to which we apply customization desktop: { afterViewControllerRun: function () { var offline_message_generator = CallGear.UI.getWidget('offline_message_generator'); // getting the application generator's widget object offline_message_generator.on('leadsubmit', function(request) { var values = offline_message_generator.getValues(), // getting values \u200b\u200bof all fields of the application generator phone = values['phone']; phone && CallGearWidget.sitePhoneCall({phone: phone}); // calling CallGearWidget.sitePhoneCall }); } } } }); The resulting structure is added to the CallGear insert code on the site. As we use the method CallGearWidget.sitephoneCall() to make a call, the call will be processed according to the sitephone settings. The \u201cSitephone\u201d component must be connected and configured. Sending an application after requesting a call through the lead generator Consider using the method CallGear.addOfflineRequest() with the lead generator form to send an application after requesting a call. You need to add the method afterViewControllerRun into the structure applyWidgetsOptions , subscribe to the event leadsubmit , inside of which we will trigger the event CallGear.addOfflineRequest with data received from the call generator form. __cs.push(['applyWidgetsOptions', { // name of the widget, to which we apply customization 'offline_message_generator': { // type of device, to which we apply customization desktop: { afterViewControllerRun: function () { var call_generator = CallGear.UI.getWidget('call_generator'); // getting the application generator's widget object call_generator.on('leadsubmit', function(request) { var values = call_generator.getValues(), // getting values \u200b\u200bof all fields of the application generator phone = values['phone']; phone && CallGear.addOfflineRequest({phone: phone}); // call CallGear.addOfflineRequest }); } } } }); The resulting structure is added to the CallGear insert code on the site. To use the method CallGear.addOfflineRequest() the \u201cConsultant\u201d component must be connected.","title":"Widget API examples"},{"location":"manual/examples/#applying-your-own-styles-and-templates-through-applywidgetoptions","text":"To apply your own styles and templates you need to add links that lead to them into the insert code. You can do so by using the structure __cs.push(['applyWidgetsOptions', {...}]) . In the method, specify the links to the components (js, css, templates) of the widgets, the type of device and the name of the widget. Type of device: desktop mobile List of widget names: personal_form call_generator offline_message_generator sitephone consultant An example of using custom js, css and tpls for a desktop call generator. <head> <script> var __cs = __cs || []; ... __cs.push([\u201capplyWidgetsOptions\u201d, { // name of the widget, to which we apply customization \u201ccall_generator\u201d: { // type of device, to which we apply customization desktop: { js: \u201c//app.callgear.com/widget/js/lead/desktop/call_generator.min.js\u201d, //customized JS-file css: \u201c//app.callgear.com/widget/css/lead/desktop/lead_call_generator_desktop.css\u201d, //customized CSS-file tpls: { \"call_generator\": \u201c//app.callgear.com/widget/html/lead/desktop/call_generator.html\u201d //customized widget template } } } }]); </script> <script type=\"text/javascript\" async src=\"//app.callgear.com/static/cs.min.js\"></script> </head> Customization is applied to all widgets matching the specified name. For example, you have several forms of a call generator configured and you want to change their appearance. After you specify widget's name call_generator in the structure, changes will be applied to all the forms of a call generator.","title":"Applying your own styles and templates through applyWidgetOptions"},{"location":"manual/examples/#adding-a-checkbox-to-link-to-a-personal-agreement-on-the-example-of-an-application-generator","text":"To add a checkbox to an application generator, you need to add the method beforeViewControllerRun in the structure applyWidgetsOptions , and change the features is_personal_info_enabled and personal_info_tex\u2019 in the object settings . By default \u2018is_personal_info_enabled\u2019 = false , \u2018personal_info_text\u2019 = \"I agree with the processing of personal data\" . __cs.push(['applyWidgetsOptions', { 'offline_message_generator': { desktop: { beforeViewControllerRun: function (settings, tpls) { settings['is_personal_info_enabled'] = true; settings['personal_info_text'] = 'I agree with the processing of personal data'; return {settings: settings, tpls: tpls}; // for further correct operation of the widget you need to return the objects \u2018settings\u2019 and \u2018tpls\u2019 } } } }); The resulting structure is added to the CallGear insert code on the website. If you try to send an application when the checkbox is removed, the checkbox will turn red and the application will not be sent until the checkbox is selected.","title":"Adding a checkbox to link to a personal agreement on the example of an application generator"},{"location":"manual/examples/#using-callgear-widget-to-change-widget","text":"Consider the use of .callgear-widget on the example of how to change the position of the widget / hide the widget on the page. .callgear-widget - the base class of all widgets, is an indicator that elements with this class belong to the widget. By default, the class is empty and does not contain a style declaration block.","title":"Using .callgear-widget to change widget"},{"location":"manual/examples/#adding-styles-to-a-page-by-connecting-a-css-file","text":"To add styles to a page, you can add them to a file with extension *.css , for example style.css and then connect then through <link rel=\"stylesheet\" href=\"style.css\"> , where href is a link that leads to the style.css file. <html> <head> ... <link rel=\"stylesheet\" href=\"style.css\"> </head> <body> ... </body> </html>","title":"Adding styles to a page by connecting a *.css file"},{"location":"manual/examples/#add-styles-to-a-page-using-the-tag-stylestyle","text":"To add styles to a page using the tag <style></style> , just define this tag in your html file, and set style rules inside this tag.","title":"Add styles to a page using the tag &lt;style&gt;&lt;/style&gt;"},{"location":"manual/examples/#examples-of-using-callgear-widget-with-the-tag-stylestyle","text":"","title":"Examples of using .callgear-widget with the tag &lt;style&gt;&lt;/style&gt;"},{"location":"manual/examples/#hiding-widget-on-a-page","text":"<html> <head> ... <style> .callgear-widget { display: none; } </style> </head> <body> ... </body> </html>","title":"Hiding widget on a page"},{"location":"manual/examples/#change-of-position-consultant-sitephone","text":"<html> <head> ... <style> .callgear-widget { justify-content: flex-start | center | flex-end; // widget vertical position on top | in the middle | on the bottom left: 0; // widget position on the left right: 0; // widget position on the right } </style> </head> <body> ... </body> </html>","title":"Change of position consultant / sitephone:"},{"location":"manual/examples/#change-the-position-of-the-lead-generator","text":"<html> <head> ... <style> .callgear-widget { align-items: flex-start | center | flex-end; // widget vertical position on top | in the middle | on the bottom justify-content: flex-start | center | flex-end; // widget horizontal position on the left| in the center | on the right } </style> </head> <body> ... </body> </html>","title":"Change the position of the lead generator:"},{"location":"manual/examples/#calling-website-visitor-after-sending-an-application-through-the-lead-generator","text":"Consider using the method CallGearWidget.sitephoneCall() with the lead generator form for making calls after sending applications. You need to add the method afterViewControllerRun into the structure applyWidgetsOptions , subscribe to the event leadsubmit , inside of which we will call the method CallGearWidget.sitePhoneCall with data from the application generator form. __cs.push(['applyWidgetsOptions', { // name of the widget, to which we apply customization 'offline_message_generator': { // type of device, to which we apply customization desktop: { afterViewControllerRun: function () { var offline_message_generator = CallGear.UI.getWidget('offline_message_generator'); // getting the application generator's widget object offline_message_generator.on('leadsubmit', function(request) { var values = offline_message_generator.getValues(), // getting values \u200b\u200bof all fields of the application generator phone = values['phone']; phone && CallGearWidget.sitePhoneCall({phone: phone}); // calling CallGearWidget.sitePhoneCall }); } } } }); The resulting structure is added to the CallGear insert code on the site. As we use the method CallGearWidget.sitephoneCall() to make a call, the call will be processed according to the sitephone settings. The \u201cSitephone\u201d component must be connected and configured.","title":"Calling website visitor after sending an application through the lead generator"},{"location":"manual/examples/#sending-an-application-after-requesting-a-call-through-the-lead-generator","text":"Consider using the method CallGear.addOfflineRequest() with the lead generator form to send an application after requesting a call. You need to add the method afterViewControllerRun into the structure applyWidgetsOptions , subscribe to the event leadsubmit , inside of which we will trigger the event CallGear.addOfflineRequest with data received from the call generator form. __cs.push(['applyWidgetsOptions', { // name of the widget, to which we apply customization 'offline_message_generator': { // type of device, to which we apply customization desktop: { afterViewControllerRun: function () { var call_generator = CallGear.UI.getWidget('call_generator'); // getting the application generator's widget object call_generator.on('leadsubmit', function(request) { var values = call_generator.getValues(), // getting values \u200b\u200bof all fields of the application generator phone = values['phone']; phone && CallGear.addOfflineRequest({phone: phone}); // call CallGear.addOfflineRequest }); } } } }); The resulting structure is added to the CallGear insert code on the site. To use the method CallGear.addOfflineRequest() the \u201cConsultant\u201d component must be connected.","title":"Sending an application after requesting a call through the lead generator"},{"location":"manual/js_api/","text":"Users can use JavaScript API to solve the following problems: To implement additional features on a website: open forms to communicate with online consultant (chat, application) from any place on the website. Getting more information about website visitors; opening a form and requesting a call back through the sitephone; assigning characteristics (for example, a visitor who opened personal area is assigned the characteristic \u201cactive customer\u201d, the one who opened the tariffs - \u201cpotential\u201d, etc.). Getting additional data in reports: any user's website event data (reading an article, checking pricing, entering personal account, etc.); information from any customer's form. Working with events Sending user events To send user event, use the following method: CallGear.trackEvent(category, action, name, value); Parameters: Title Type Description category text category, required parameter action text action, required parameter name text name, optional parameter value text value, optional parameter Example of usage: CallGear.trackEvent('Offer', 'DownloadBook', 'CallTrackingBook', 'value'); Receiving visitor ID To receive visitor ID, use the following method: CallGear.getVisitorId(); Working with banners Checking operators who are online To check for operators who are online, use the method: CallGear.getOperatorStatus(); Method returns true , if there's at least one operator online, otherwise it returns false . Application form To open application form, use the method: CallGear.openSiteRequestPanel(); User application form The data obtained when using a user application form on the website can be sent using the following method: CallGear.addOfflineRequest(req, callback); You can use this method only if you send the form in a way that does not reload the page! For other cases, there is an alternative method. Parameters: Title Type Description req {\"name\": myName, \"email\": myEmail, \"phone\": myPhone, \"message\": myMessage, \"is_sale\": mySale, \"sale_cost\": myCost} Parameters description: myName - text type - visitor name, myEmail - text type - visitor email, myPhone - text type - visitor phone number, myMessage - text type - application text and other information, for which there is no separate field, mySale - true - if it's a sale; false - if it's not a sale (by default), myCost - sale cost. If you need to send sale cost, you must transfer the value true in the parameter is_sale . callback \"success\": <Boolean>, \"result\": {\"code\": <String>}} A feature of an argument, that will be called after the server sends the result of saving the form. Optional parameter. Example: Regular application: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Application text...' }); Application, lead to a sale: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Online order...', is_sale: true, sale_cost: '9999' }); Example of using the parameter callback: CallGear.addOfflineRequest({\"name\": \"My Name Is\"}, function(o) {console.log(o);}); after you successfully save an application, the result will be displayed in the browser console: Object {success: true, result: null} Alternative way to send user applications Before sending an application, you need to get the authentication data of the widget using the method JS API CallGear.getCredentials() . Method returns the object: { \"site_key\": \"VcB4qqpO1WPSopO670cAbXwAH9Ryaw75\", \"visitor_id\": 17258569, \"hit_id\": 546833568748, \"session_id\": 255544855, \"consultant_server_url\": \"https://server.callgear.com/\" // URL base } Transfer the received data along with the rest data from the form. To add application make an HTTP-request to a server in the application server processor. The base part of the URL cannot be hard-coded. It must be taken from the data of paragraph 1. It is subject to change. POST https://server.callgear.com/api/add_offline_message/ Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Form Data //data formatted for clarity site_key=VcB4qqpO1WPSopO670cAbXwAH9Ryaw75 &visitor_id=17258569 &hit_id=546833568748 &session_id=255544855 &name=John Smith &email=no@email.adr &phone=+79251234567 &text=Hello, world! &is_sale=true &sale_cost=10000 A success \"application added\" flag will be sent in the reply ( application/json ): { \"success\": true } An example of using an alternative method to send user applications Example with page reload We will assume that the embed code is already installed on the website, the jQuery library is connected and there is a feedback form. The simplest form of the feedback code would look like this: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='submit' /> </form> In order to send an application, the form code needs to be finalized: add service fields and a processor to the \"Send\" button: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"formSubmit()\"/> <input type=\"hidden\" name='site_key'/> <input type=\"hidden\" name='visitor_id'/> <input type=\"hidden\" name='hit_id'/> <input type=\"hidden\" name='session_id'/> <input type=\"hidden\" name='consultant_server_url'/> </form> In the page code or in a separate JS-file, you need to write the feature formSubmit() , which will be called every time you click the \"Send\" button: function formSubmit() { var credentials = CallGear.getCredentials(); for (field in credentials) { if (credentials.hasOwnProperty(field)){ $('[name='+field+']').val(credentials[field]); } } $('#myform').submit(); } This code receives service information, saves it in invisible service fields of the form and sends the form to the server. Next, you need to modify the code that is responsible for processing the application on the server. In our case, this code is in the send.php file: <? /* Here is the default code associated with processing the request on the server side. For example, sending letters, or saving to a database. */ ?> <? $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //The unchanged value from the site_key service field 'visitor_id' => $_POST['visitor_id'], //The unchanged value from the visitor_id service field 'hit_id' => $_POST['hit_id'], //The unchanged value from the hit_id service field 'session_id' => $_POST['session_id'], //The unchanged value from the session_id service field 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to send the sale cost, then is_sale must be true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); print $options['http']['content']; $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success' === false]) { /* There may be actions in case sending of an application fails. */ } ?> Example with AJAX-request HTML-markup of a simple form: <form id='myform2'> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"sendAjaxSubmit()\"/> </form> AJAX-request sending JS-code: function sendAjaxSubmit() { /* This can be a check of the required filled in fields, validation of the phone number and other checks. */ $.ajax({ url: 'sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, }) } Processing the received request PHP-code: <? /* Code for processing incoming data, saving to the database or sending an application by email. */ $success = true; /* The variable defines whether or not the application was saved. */ if ($success) { print 'Application successfully saved'; } else { print 'An unexpected error has occurred'; } ?> In order to send an application, in case of sending an application with an AJAX request, you do not need to modify the HTML-form. It is necessary to modify the JS code so that service information is received before sending the request: function sendAjaxSubmit() { /* Here you can check the required filled in fields, validate the phone number and make other checks. */ $.ajax({ url: '/sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, beforeSend: function(jqXHR, settings) { var credentials = CallGear.getCredentials(); settings.data += '&' + $.param(credentials); } }) } The code needs to be executed on the server. In this case, it is in a sendAjax.php file: <? /* Here is the default code associated with processing an application on the server side. For example, sending letters, or saving to a database. */ ?> <? $success = true; /* Check that everything is done correctly. */ if ($success) { $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //Unchanged value from the service field site_key 'visitor_id' => $_POST['visitor_id'], //Unchanged value from the service field visitor_id 'hit_id' => $_POST['hit_id'], //Unchanged value from the service field hit_id 'session_id' => $_POST['session_id'], //Unchanged value from the service field session_id 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to transfer a sale cost, then is_sale must equal true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success' === false]) { /* Processing the case if sending of an application failed. */ } else { print 'Application successfully saved.'; } } else { print 'An unexpected error has occurred'; } ?> Sitephone form To open our standard sitephone form, use the method: CallGearWidget.openSitePhonePanel(); Captcha for sitephone forms CallGear.Captcha.get_captcha(callback); Parameters: Title Type Description callback {key: myKey, url: myURL} Returning reply: myKey - captcha key, myURL - picture address. Example: CallGear.Captcha.get_captcha(function(resp){console.log(resp)}); Sitephone user form In addition to standard widgets, you can use any form you want for call backs on the site. To do so, you need to embed the callback method call into your form using the JS API: CallGearWidget.sitePhoneCall({captcha_key: <captcha ID>, captcha_value: <captcha value>, phone:<phone number>, delayed_call_time:<call time>, group_id:<group id>}, callback); Parameters: Title Type Description captcha_key text Captcha ID. Required, if captcha is switched on in the callback settings. captcha_value text Captcha value (what a visitor entered in the form): take myURL result from the method Captcha.get_captcha() , click a link, see 4 figures. Required, if captcha is switched on in the callback settings. phone text Visitor phone number. Required. delayed_call_time text UTC call time in milliseconds. group_id text Employees group ID, where a call will be directed to. callback {\"success\": <Boolean>, \"result\":{status: <Integer>, code: <String>}} Returning reply, optional (but advised). If it's not specified, the feature will work similarly to a call from the standard sitephone form and will display a pop-up notification with the result. Parameters: success: true - successful, false - failed; result - call results: status - call status. Possible statuses: Code Value 0 successful, call sent to platform 1 captcha is incorrect 2 callback processing scenario is not specified 3 platform error 4 limit of calls per minute has been exceeded (up to 10 calls) Example of usage: CallGearWidget.sitePhoneCall({captcha_key: 'jwgtGYZDYTA...4pBEWRx', captcha_value: '8315', phone:'79101234567', delayed_call_time: 1508927547000 , group_id: '16587'}, function(resp){console.log(resp)}); Chat form When the following method is called, if there are operators online, a chat form opens: CallGear.openChatWindow(); If no operators are online, the application form opens. Working with characteristics Adding characteristics to visitors The following method is used to assign a characteristic or its value: CallGear.setProperty(name, value); Parameter: Title Type Description name text Name of a characteristic, that should be assigned to a visitor value text Characteristic value (optional parameter) Examples: The \"visitor type\" characteristic with the \"potential\" value is set as follows: CallGear.setProperty('Visitor type', 'Potential'); The \"active client\" characteristic (without value) is set as follows: CallGear.setProperty('Active customer'); Checking whether or not visitor has a characteristic To check whether or not visitor has a characteristic, use the method: CallGear.hasProperty(name, callback); Parameters: Title Type Description name text Name of a characteristic, that should be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name assigned false - feature name not assigned Example: CallGear.hasProperty('Active customer', callback); CallGear.hasProperty('Active customer', function(resp){console.log(resp)}); Getting visitor characteristics values To get visitor characteristics values use the following method: CallGear.getProperty(name, callback); Parameters: Title Type Description name text Title of a feature to be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name , false - the name feature not assigned Example: CallGear.getProperty('Customer type', callback); CallGear.getProperty('Current customer', function(resp){console.log(resp)}); Deleting visitor characteristics To delete visitor characteristic, assigned to a visitor, use the following method: CallGear.deleteProperty(name); Parameters: Title Type Description name text Title of a feature, that's to be deleted Example: CallGear.deleteProperty('visitor type'); Number substitution Number substitution in dynamic blocks In order to enable number substitution in dynamically added blocks, an additional line must be added to the insert code: __cs.push([\"setDynamicalReplacement\", true]); or CallGear.push([\"setDynamicalReplacement\", true]); Managing number substitution When a number substitution is necessary only under certain conditions, for example, only for visitors from Moscow, you need to redefine the feature that controls the number substitution, window .__ cs_onReplacePhones (phones) . It works as follows: if it returns true , the substitution will be performed as if the feature had not been redefined, if it returns false , the substitution will not be performed. The function is created at the time of the service code initialization and by default has the form: window.__cs_onReplacePhones = function(phones) {return true;}; If you do not need to manage the substitution, then you do not need to redefine the feature. If numbers need to be substituted only under certain conditions, then this feature must be redefined by adding necessary conditions into the body This feature allows you to not only manage the substitution, but also perform it yourself. To do this, the phones bulk is passed to the feature: [ { id: \"#callgear_phone\", // ID img: \"/path/to/image\", // image address (if image substitution is used) text: \"+7 (495) 926-86-86\", // number formatted according to user settings raw: \"74959268686\" // number without formatting }, ... ] Getting numbers, given to a visitor If a customer needs to get a list of all the numbers issued to a website visitor, you can use the following feature: CallGear.getPhones(); The reply will return a bulk of objects similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone] number number=XXXXXXXXXXX Getting a list of dynamic tracking numbers reserved for a visitor If a customer needs to get a list of dynamic tracking numbers reserved for a visitor, you can use the following feature: CallGear.getDTPhones(); This feature will return null in the case no dynamic tracking numbers are reserved for a visitor. If there are several reserved numbers, then a bulk of objects will return, similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone]","title":"Js api"},{"location":"manual/js_api/#working-with-events","text":"","title":"Working with events"},{"location":"manual/js_api/#sending-user-events","text":"To send user event, use the following method: CallGear.trackEvent(category, action, name, value); Parameters: Title Type Description category text category, required parameter action text action, required parameter name text name, optional parameter value text value, optional parameter Example of usage: CallGear.trackEvent('Offer', 'DownloadBook', 'CallTrackingBook', 'value'); Receiving visitor ID To receive visitor ID, use the following method: CallGear.getVisitorId();","title":"Sending user events"},{"location":"manual/js_api/#working-with-banners","text":"","title":"Working with banners"},{"location":"manual/js_api/#checking-operators-who-are-online","text":"To check for operators who are online, use the method: CallGear.getOperatorStatus(); Method returns true , if there's at least one operator online, otherwise it returns false .","title":"Checking operators who are online"},{"location":"manual/js_api/#application-form","text":"To open application form, use the method: CallGear.openSiteRequestPanel(); User application form The data obtained when using a user application form on the website can be sent using the following method: CallGear.addOfflineRequest(req, callback); You can use this method only if you send the form in a way that does not reload the page! For other cases, there is an alternative method. Parameters: Title Type Description req {\"name\": myName, \"email\": myEmail, \"phone\": myPhone, \"message\": myMessage, \"is_sale\": mySale, \"sale_cost\": myCost} Parameters description: myName - text type - visitor name, myEmail - text type - visitor email, myPhone - text type - visitor phone number, myMessage - text type - application text and other information, for which there is no separate field, mySale - true - if it's a sale; false - if it's not a sale (by default), myCost - sale cost. If you need to send sale cost, you must transfer the value true in the parameter is_sale . callback \"success\": <Boolean>, \"result\": {\"code\": <String>}} A feature of an argument, that will be called after the server sends the result of saving the form. Optional parameter. Example: Regular application: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Application text...' }); Application, lead to a sale: CallGear.addOfflineRequest({ name: 'Dmitry', email: 'dmitry@callgear.com', phone: '79123456789', message: 'Online order...', is_sale: true, sale_cost: '9999' }); Example of using the parameter callback: CallGear.addOfflineRequest({\"name\": \"My Name Is\"}, function(o) {console.log(o);}); after you successfully save an application, the result will be displayed in the browser console: Object {success: true, result: null} Alternative way to send user applications Before sending an application, you need to get the authentication data of the widget using the method JS API CallGear.getCredentials() . Method returns the object: { \"site_key\": \"VcB4qqpO1WPSopO670cAbXwAH9Ryaw75\", \"visitor_id\": 17258569, \"hit_id\": 546833568748, \"session_id\": 255544855, \"consultant_server_url\": \"https://server.callgear.com/\" // URL base } Transfer the received data along with the rest data from the form. To add application make an HTTP-request to a server in the application server processor. The base part of the URL cannot be hard-coded. It must be taken from the data of paragraph 1. It is subject to change. POST https://server.callgear.com/api/add_offline_message/ Content-Type: application/x-www-form-urlencoded; charset=UTF-8 Form Data //data formatted for clarity site_key=VcB4qqpO1WPSopO670cAbXwAH9Ryaw75 &visitor_id=17258569 &hit_id=546833568748 &session_id=255544855 &name=John Smith &email=no@email.adr &phone=+79251234567 &text=Hello, world! &is_sale=true &sale_cost=10000 A success \"application added\" flag will be sent in the reply ( application/json ): { \"success\": true }","title":"Application form"},{"location":"manual/js_api/#an-example-of-using-an-alternative-method-to-send-user-applications","text":"Example with page reload We will assume that the embed code is already installed on the website, the jQuery library is connected and there is a feedback form. The simplest form of the feedback code would look like this: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='submit' /> </form> In order to send an application, the form code needs to be finalized: add service fields and a processor to the \"Send\" button: <form id='myform' action=\"/send.php\" method=\"POST\"> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"formSubmit()\"/> <input type=\"hidden\" name='site_key'/> <input type=\"hidden\" name='visitor_id'/> <input type=\"hidden\" name='hit_id'/> <input type=\"hidden\" name='session_id'/> <input type=\"hidden\" name='consultant_server_url'/> </form> In the page code or in a separate JS-file, you need to write the feature formSubmit() , which will be called every time you click the \"Send\" button: function formSubmit() { var credentials = CallGear.getCredentials(); for (field in credentials) { if (credentials.hasOwnProperty(field)){ $('[name='+field+']').val(credentials[field]); } } $('#myform').submit(); } This code receives service information, saves it in invisible service fields of the form and sends the form to the server. Next, you need to modify the code that is responsible for processing the application on the server. In our case, this code is in the send.php file: <? /* Here is the default code associated with processing the request on the server side. For example, sending letters, or saving to a database. */ ?> <? $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //The unchanged value from the site_key service field 'visitor_id' => $_POST['visitor_id'], //The unchanged value from the visitor_id service field 'hit_id' => $_POST['hit_id'], //The unchanged value from the hit_id service field 'session_id' => $_POST['session_id'], //The unchanged value from the session_id service field 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to send the sale cost, then is_sale must be true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); print $options['http']['content']; $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success' === false]) { /* There may be actions in case sending of an application fails. */ } ?> Example with AJAX-request HTML-markup of a simple form: <form id='myform2'> <input type=\"text\" name='name' value='' placeholder=\"Enter name\" /><br> <input type=\"text\" name='phone' value='' placeholder=\"Enter phone number\" /><br> <input type=\"text\" name='email' value='' placeholder=\"Enter e-mail\" /><br> <textarea name=\"text\"></textarea><br> <input type='button' value='Send' onclick=\"sendAjaxSubmit()\"/> </form> AJAX-request sending JS-code: function sendAjaxSubmit() { /* This can be a check of the required filled in fields, validation of the phone number and other checks. */ $.ajax({ url: 'sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, }) } Processing the received request PHP-code: <? /* Code for processing incoming data, saving to the database or sending an application by email. */ $success = true; /* The variable defines whether or not the application was saved. */ if ($success) { print 'Application successfully saved'; } else { print 'An unexpected error has occurred'; } ?> In order to send an application, in case of sending an application with an AJAX request, you do not need to modify the HTML-form. It is necessary to modify the JS code so that service information is received before sending the request: function sendAjaxSubmit() { /* Here you can check the required filled in fields, validate the phone number and make other checks. */ $.ajax({ url: '/sendAjax.php', method: 'POST', data: $('#myform2').serialize(), complete: function(response) { if (response.readyState === 4 && response.status === 200) { alert(response.responseText); } }, beforeSend: function(jqXHR, settings) { var credentials = CallGear.getCredentials(); settings.data += '&' + $.param(credentials); } }) } The code needs to be executed on the server. In this case, it is in a sendAjax.php file: <? /* Here is the default code associated with processing an application on the server side. For example, sending letters, or saving to a database. */ ?> <? $success = true; /* Check that everything is done correctly. */ if ($success) { $url = $_POST['consultant_server_url'].'api/add_offline_message/'; $data = array( 'site_key' => $_POST['site_key'], //Unchanged value from the service field site_key 'visitor_id' => $_POST['visitor_id'], //Unchanged value from the service field visitor_id 'hit_id' => $_POST['hit_id'], //Unchanged value from the service field hit_id 'session_id' => $_POST['session_id'], //Unchanged value from the service field session_id 'name' => $_POST['name'], //Customer name 'email' => $_POST['email'], //E-mail 'phone' => $_POST['phone'], //Phone number 'text' => $_POST['text'], //Application text 'is_sale' => true, //true, if it's a sale 'sale_cost' => 10000 //Sale cost. If you need to transfer a sale cost, then is_sale must equal true ); /* If all the fields in the html-markup of the form are called as CallGear requires, you can write \"$data = $_POST\". Otherwise, additional conversions are required. */ $options = array( 'http' => array( 'header' => \"Content-type: application/x-www-form-urlencoded; charset=UTF-8\", 'method' => \"POST\", 'content' => http_build_query($data) ) ); $context = stream_context_create($options); $result = file_get_contents($url, false, $context); $resultArray = json_decode($result, true); if ($result === false or $resultArray['success' === false]) { /* Processing the case if sending of an application failed. */ } else { print 'Application successfully saved.'; } } else { print 'An unexpected error has occurred'; } ?>","title":"An example of using an alternative method to send user applications"},{"location":"manual/js_api/#sitephone-form","text":"To open our standard sitephone form, use the method: CallGearWidget.openSitePhonePanel(); Captcha for sitephone forms CallGear.Captcha.get_captcha(callback); Parameters: Title Type Description callback {key: myKey, url: myURL} Returning reply: myKey - captcha key, myURL - picture address. Example: CallGear.Captcha.get_captcha(function(resp){console.log(resp)}); Sitephone user form In addition to standard widgets, you can use any form you want for call backs on the site. To do so, you need to embed the callback method call into your form using the JS API: CallGearWidget.sitePhoneCall({captcha_key: <captcha ID>, captcha_value: <captcha value>, phone:<phone number>, delayed_call_time:<call time>, group_id:<group id>}, callback); Parameters: Title Type Description captcha_key text Captcha ID. Required, if captcha is switched on in the callback settings. captcha_value text Captcha value (what a visitor entered in the form): take myURL result from the method Captcha.get_captcha() , click a link, see 4 figures. Required, if captcha is switched on in the callback settings. phone text Visitor phone number. Required. delayed_call_time text UTC call time in milliseconds. group_id text Employees group ID, where a call will be directed to. callback {\"success\": <Boolean>, \"result\":{status: <Integer>, code: <String>}} Returning reply, optional (but advised). If it's not specified, the feature will work similarly to a call from the standard sitephone form and will display a pop-up notification with the result. Parameters: success: true - successful, false - failed; result - call results: status - call status. Possible statuses: Code Value 0 successful, call sent to platform 1 captcha is incorrect 2 callback processing scenario is not specified 3 platform error 4 limit of calls per minute has been exceeded (up to 10 calls) Example of usage: CallGearWidget.sitePhoneCall({captcha_key: 'jwgtGYZDYTA...4pBEWRx', captcha_value: '8315', phone:'79101234567', delayed_call_time: 1508927547000 , group_id: '16587'}, function(resp){console.log(resp)});","title":"Sitephone form"},{"location":"manual/js_api/#chat-form","text":"When the following method is called, if there are operators online, a chat form opens: CallGear.openChatWindow(); If no operators are online, the application form opens.","title":"Chat form"},{"location":"manual/js_api/#working-with-characteristics","text":"","title":"Working with characteristics"},{"location":"manual/js_api/#adding-characteristics-to-visitors","text":"The following method is used to assign a characteristic or its value: CallGear.setProperty(name, value); Parameter: Title Type Description name text Name of a characteristic, that should be assigned to a visitor value text Characteristic value (optional parameter) Examples: The \"visitor type\" characteristic with the \"potential\" value is set as follows: CallGear.setProperty('Visitor type', 'Potential'); The \"active client\" characteristic (without value) is set as follows: CallGear.setProperty('Active customer');","title":"Adding characteristics to visitors"},{"location":"manual/js_api/#checking-whether-or-not-visitor-has-a-characteristic","text":"To check whether or not visitor has a characteristic, use the method: CallGear.hasProperty(name, callback); Parameters: Title Type Description name text Name of a characteristic, that should be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name assigned false - feature name not assigned Example: CallGear.hasProperty('Active customer', callback); CallGear.hasProperty('Active customer', function(resp){console.log(resp)});","title":"Checking whether or not visitor has a characteristic"},{"location":"manual/js_api/#getting-visitor-characteristics-values","text":"To get visitor characteristics values use the following method: CallGear.getProperty(name, callback); Parameters: Title Type Description name text Title of a feature to be assigned to a visitor callback {\"success\": <Boolean>,\"result\": <Boolean>,} Returning reply. success: true - method successfully processed, false - error; result: true - value name , false - the name feature not assigned Example: CallGear.getProperty('Customer type', callback); CallGear.getProperty('Current customer', function(resp){console.log(resp)});","title":"Getting visitor characteristics values"},{"location":"manual/js_api/#deleting-visitor-characteristics","text":"To delete visitor characteristic, assigned to a visitor, use the following method: CallGear.deleteProperty(name); Parameters: Title Type Description name text Title of a feature, that's to be deleted Example: CallGear.deleteProperty('visitor type');","title":"Deleting visitor characteristics"},{"location":"manual/js_api/#number-substitution","text":"","title":"Number substitution"},{"location":"manual/js_api/#number-substitution-in-dynamic-blocks","text":"In order to enable number substitution in dynamically added blocks, an additional line must be added to the insert code: __cs.push([\"setDynamicalReplacement\", true]); or CallGear.push([\"setDynamicalReplacement\", true]);","title":"Number substitution in dynamic blocks"},{"location":"manual/js_api/#managing-number-substitution","text":"When a number substitution is necessary only under certain conditions, for example, only for visitors from Moscow, you need to redefine the feature that controls the number substitution, window .__ cs_onReplacePhones (phones) . It works as follows: if it returns true , the substitution will be performed as if the feature had not been redefined, if it returns false , the substitution will not be performed. The function is created at the time of the service code initialization and by default has the form: window.__cs_onReplacePhones = function(phones) {return true;}; If you do not need to manage the substitution, then you do not need to redefine the feature. If numbers need to be substituted only under certain conditions, then this feature must be redefined by adding necessary conditions into the body This feature allows you to not only manage the substitution, but also perform it yourself. To do this, the phones bulk is passed to the feature: [ { id: \"#callgear_phone\", // ID img: \"/path/to/image\", // image address (if image substitution is used) text: \"+7 (495) 926-86-86\", // number formatted according to user settings raw: \"74959268686\" // number without formatting }, ... ]","title":"Managing number substitution"},{"location":"manual/js_api/#getting-numbers-given-to-a-visitor","text":"If a customer needs to get a list of all the numbers issued to a website visitor, you can use the following feature: CallGear.getPhones(); The reply will return a bulk of objects similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone] number number=XXXXXXXXXXX","title":"Getting numbers, given to a visitor"},{"location":"manual/js_api/#getting-a-list-of-dynamic-tracking-numbers-reserved-for-a-visitor","text":"If a customer needs to get a list of dynamic tracking numbers reserved for a visitor, you can use the following feature: CallGear.getDTPhones(); This feature will return null in the case no dynamic tracking numbers are reserved for a visitor. If there are several reserved numbers, then a bulk of objects will return, similar to the phones list in __cs_onReplacePhones . Example: [ { id: '#callgear_phone', // element ID img: null || 'path/to/img', // image address (if image substitution is used) text: null || '+7(495)999-99-99', // formatted number raw: '74959999999' // number without formatting }, ... ] Parameters: Substituted ID type Example of ID field return value id #callgear_phone class .callgear_phone name [name=callgear_phone]","title":"Getting a list of dynamic tracking numbers reserved for a visitor"},{"location":"manual/sitephone/","text":"Sitephone ViewController For the sitephone to work, you need to register a ViewController with the name sitephone . Methods startCall(params) Method that allows you to request a call to a specified phone number. The params object contains the following properties: phone - the phone number to which the call is being made. This field is required. captcha_key - captcha key received from the server. The field needs to be filled in only if captcha is enabled in the sitephone settings. captcha_value - captcha entered by a visitor. The field needs to be filled in only if captcha is enabled in the sitephone settings. group_id - ID of an operators group with which a website visitor should be connected. This field must be filled in if the option \"Process call in accordance with the selected group on the widget\" is selected in the sitephone settings in the way calls are processed delayed_call_time - parameter for making a delayed call. Set in ms number format, UTC. Events callcomplete The event occurs after a call is requested and allows you to find out if the call order was successful. Event properties callcomplete: an object containing the following fields: success - true , if a call order happened, false , if there were errors in the process. info - object containing text fields title and message to display a message to a website visitor. Sandbox Desktop, tablet: Mobile:","title":"Sitephone"},{"location":"manual/sitephone/#sitephone","text":"","title":"Sitephone"},{"location":"manual/sitephone/#viewcontroller","text":"For the sitephone to work, you need to register a ViewController with the name sitephone .","title":"ViewController"},{"location":"manual/sitephone/#methods","text":"startCall(params) Method that allows you to request a call to a specified phone number. The params object contains the following properties: phone - the phone number to which the call is being made. This field is required. captcha_key - captcha key received from the server. The field needs to be filled in only if captcha is enabled in the sitephone settings. captcha_value - captcha entered by a visitor. The field needs to be filled in only if captcha is enabled in the sitephone settings. group_id - ID of an operators group with which a website visitor should be connected. This field must be filled in if the option \"Process call in accordance with the selected group on the widget\" is selected in the sitephone settings in the way calls are processed delayed_call_time - parameter for making a delayed call. Set in ms number format, UTC.","title":"Methods"},{"location":"manual/sitephone/#events","text":"callcomplete The event occurs after a call is requested and allows you to find out if the call order was successful. Event properties callcomplete: an object containing the following fields: success - true , if a call order happened, false , if there were errors in the process. info - object containing text fields title and message to display a message to a website visitor.","title":"Events"},{"location":"manual/sitephone/#sandbox","text":"","title":"Sandbox"},{"location":"manual/sitephone/#desktop-tablet","text":"","title":"Desktop, tablet:"},{"location":"manual/sitephone/#mobile","text":"","title":"Mobile:"},{"location":"manual/tpls/","text":"Template \u2014 html-structure with added variables, expressions and directives. When working with templates, a template engine is used lodash.template , which accesses the object settings, assigned when creating a widget. In order to use a template, you must pass it to the tpl property: var sitephone = CallGear.UI.createWidget('sitephone', { settings: settings, tpl: '<div>my template</div>' }); This template is transformed into a dom element after calling render, and is accessible through a call to the getEl method. sitephone.render(); var el = sitephone.getEl(); This is not the only way to bind a dom element to a widget. Also, when creating a widget, you can transfer the already prepared element: var sitephone = CallGear.UI.createWidget('sitephone', { tpl: document.getElementById('sitephone_el') }); In this case, do not use the render method, settings are not taken into account, since the finished element is already taken from the page as it is.","title":"Templates"},{"location":"manual/consultant/chat/","text":"Chat ViewController For a consultant to work, you need to register a ViewController with the name consultant . Important: ViewController is registered once for all the online consultant forms CreateWidget To create a chat widget, you need to call the method CallGear.UI.createWidget() with the following parameters: widgetName = 'consultant_chat' Example CallGear.UI.registerViewController('consultant', function (settings, tpls) { ... var chat = CallGear.UI.createWidget('consultant_chat', { settings: settings, template: tpls['chat'], ... }); ... chat.render(); }); Method startChat() Chat initiation by a visitor. At this moment, a visitor will get the \"Waiting\" status. chat.on('show', function(){ chat.startChat(); }); When the form is opened, the show event is activated and the startChat () method is called. closeChat() The completion of the chat initiated by a visitor. The visitor will get the \"On site\" status. chat.on('beforehide', function(){ chat.closeChat(); }); Before the form is hidden, the closeChat() method is called. isChatAvailable() Checks if there's an operator with the status \"online\" in the current chat. Returns true or false . sendChatByMail(mail: string) Sends correspondence history to an e-mail. sendChatMessage(message: string) Sends a message from a website visitor. setOperatorRating(mark: number) The method saves the mark , that a visitor gave to an operator in the current chat. hasHistory() Checks for message history. Returns true or false . if (chat.hasHistory() { var history = chat.getHistory(); } Check for message history. If it exists, then we request it. getHistory() Request message history. Up to 20 messages per request. Returns a bulk of messages or false , if there are no messages. if (chat.hasHistory() { var history = chat.getHistory(); } getOperatorVcard() The method returns an object containing information about the operator of the current chat. Object contains the following fields: name - operator name position - operator position avatar - link to operator\u2019s photo getVisitorCard() The method returns an object containing information about a visitor. An object may contain the following fields: name - visitor name email - an bulk containing up to five e-mails specified earlier by a customer phone - an bulk containing up to five phone numbers specified earlier by a customer setVisitorCard(vcard) The method stores information about the visitor. The vcard object may contain the following fields: name - visitor name email - visitor e-mail phone - visitor phone number inviteAccept() Invitation to chat accepted. inviteReject() Invitation to chat rejected. sendFile(input) Sending files to chat. isReadyForFileTransfer() Method that will return true when you can send a file. getRequiredInfo() The method returns a bulk of visitor\u2019s card fields names that must be requested the next time the personal data form is shown. getState() The method returns the current status of a visitor. Valid values: available - visitor on the website not interacting with widgets. invite - visitor received an invitation to a chat. chat - visitor in talking to chat operator. lead - the form of the lead generator is displayed. chatTyping(text: string) The method sends text to the RMO as a message typed by the visitor. Events operatorjoined The event occurs when an operator joins the chat. operatorjoined event features: Object, containing the following fields: name - operator name. position - operator position. avatar - link to operator\u2019s photo. operatorleave The event occurs when an operator leaves the chat. operatorleave event properties Fields similar to operatorjoined event, containing null. sendmessage The event is triggered when receiving a chat message. It can be a message from the chat operator, system message or message from the customer sent from the other website page. sendmessage event features: Object, containing the following fields: text - message text. date - Unixtime message sending time. source - message sender. Possible values: Operator , Visitor , System . from - operator name if the message was sent by an operator. In other cases, the value of from is equal to source . chat_id - id of a chat, a message belongs to. message_id - message unique id. uid - temporary id, used to synchronize sent and received messages. showchatretentionaction An event occurs when you need to show an alternative communication button in the chat. showchatretentionaction event features: Object, containing the field: alternate_communication_way - alternative communication mnemonics. Mnemonics possible values: offline_message - application form. sitephone - call form. chat - group choice form. chatavailabilitychange The event occurs in the following situations: There are no PMO operators online, in this case the value false returns in the event. There is at least one operator online, in this case the value true returns. invite The event occurs when an operator invites a visitor to the chat, or when the auto-invite function is activated. invite event features: invite_message - the message to be displayed when inviting. startchat Event occurs in response to the command chat.startChat() closechat Event occurs in response to the command chat.closeChat() inviteaccept Event occurs in response to the command chat.inviteAccept() invitereject Event occurs in response to the command chat.inviteReject() setrating Event occurs in response to the command chat.setOperatorRating() sendchatbymail Event occurs in response to the command chat.sendChatByMail() ratingchange The event occurs when operator's rating is changed. ratingchange event features: The number corresponding to the operator\u2019s rating in the current chat, or null if no rating exists. statechange The event occurs when website visitor status changes. statechange event features: mnemonics corresponding to the visitor's new status. Possible values: available - visitor on the website not interacting with widgets. invite - visitor received an invitation to a chat. chat - visitor in talking to chat operator. lead - the form of the lead generator is displayed. chattyping Event occurs when an operator types a message.","title":"Chat"},{"location":"manual/consultant/chat/#chat","text":"","title":"Chat"},{"location":"manual/consultant/chat/#viewcontroller","text":"For a consultant to work, you need to register a ViewController with the name consultant . Important: ViewController is registered once for all the online consultant forms","title":"ViewController"},{"location":"manual/consultant/chat/#createwidget","text":"To create a chat widget, you need to call the method CallGear.UI.createWidget() with the following parameters: widgetName = 'consultant_chat'","title":"CreateWidget"},{"location":"manual/consultant/chat/#example","text":"CallGear.UI.registerViewController('consultant', function (settings, tpls) { ... var chat = CallGear.UI.createWidget('consultant_chat', { settings: settings, template: tpls['chat'], ... }); ... chat.render(); });","title":"Example"},{"location":"manual/consultant/chat/#method","text":"","title":"Method"},{"location":"manual/consultant/chat/#startchat","text":"Chat initiation by a visitor. At this moment, a visitor will get the \"Waiting\" status. chat.on('show', function(){ chat.startChat(); }); When the form is opened, the show event is activated and the startChat () method is called.","title":"startChat()"},{"location":"manual/consultant/chat/#closechat","text":"The completion of the chat initiated by a visitor. The visitor will get the \"On site\" status. chat.on('beforehide', function(){ chat.closeChat(); }); Before the form is hidden, the closeChat() method is called.","title":"closeChat()"},{"location":"manual/consultant/chat/#ischatavailable","text":"Checks if there's an operator with the status \"online\" in the current chat. Returns true or false .","title":"isChatAvailable()"},{"location":"manual/consultant/chat/#sendchatbymailmail-string","text":"Sends correspondence history to an e-mail.","title":"sendChatByMail(mail: string)"},{"location":"manual/consultant/chat/#sendchatmessagemessage-string","text":"Sends a message from a website visitor.","title":"sendChatMessage(message: string)"},{"location":"manual/consultant/chat/#setoperatorratingmark-number","text":"The method saves the mark , that a visitor gave to an operator in the current chat.","title":"setOperatorRating(mark: number)"},{"location":"manual/consultant/chat/#hashistory","text":"Checks for message history. Returns true or false . if (chat.hasHistory() { var history = chat.getHistory(); } Check for message history. If it exists, then we request it.","title":"hasHistory()"},{"location":"manual/consultant/chat/#gethistory","text":"Request message history. Up to 20 messages per request. Returns a bulk of messages or false , if there are no messages. if (chat.hasHistory() { var history = chat.getHistory(); }","title":"getHistory()"},{"location":"manual/consultant/chat/#getoperatorvcard","text":"The method returns an object containing information about the operator of the current chat. Object contains the following fields: name - operator name position - operator position avatar - link to operator\u2019s photo","title":"getOperatorVcard()"},{"location":"manual/consultant/chat/#getvisitorcard","text":"The method returns an object containing information about a visitor. An object may contain the following fields: name - visitor name email - an bulk containing up to five e-mails specified earlier by a customer phone - an bulk containing up to five phone numbers specified earlier by a customer","title":"getVisitorCard()"},{"location":"manual/consultant/chat/#setvisitorcardvcard","text":"The method stores information about the visitor. The vcard object may contain the following fields: name - visitor name email - visitor e-mail phone - visitor phone number","title":"setVisitorCard(vcard)"},{"location":"manual/consultant/chat/#inviteaccept","text":"Invitation to chat accepted.","title":"inviteAccept()"},{"location":"manual/consultant/chat/#invitereject","text":"Invitation to chat rejected.","title":"inviteReject()"},{"location":"manual/consultant/chat/#sendfileinput","text":"Sending files to chat.","title":"sendFile(input)"},{"location":"manual/consultant/chat/#isreadyforfiletransfer","text":"Method that will return true when you can send a file.","title":"isReadyForFileTransfer()"},{"location":"manual/consultant/chat/#getrequiredinfo","text":"The method returns a bulk of visitor\u2019s card fields names that must be requested the next time the personal data form is shown.","title":"getRequiredInfo()"},{"location":"manual/consultant/chat/#getstate","text":"The method returns the current status of a visitor. Valid values: available - visitor on the website not interacting with widgets. invite - visitor received an invitation to a chat. chat - visitor in talking to chat operator. lead - the form of the lead generator is displayed.","title":"getState()"},{"location":"manual/consultant/chat/#chattypingtext-string","text":"The method sends text to the RMO as a message typed by the visitor.","title":"chatTyping(text: string)"},{"location":"manual/consultant/chat/#events","text":"","title":"Events"},{"location":"manual/consultant/chat/#operatorjoined","text":"The event occurs when an operator joins the chat. operatorjoined event features: Object, containing the following fields: name - operator name. position - operator position. avatar - link to operator\u2019s photo.","title":"operatorjoined"},{"location":"manual/consultant/chat/#operatorleave","text":"The event occurs when an operator leaves the chat. operatorleave event properties Fields similar to operatorjoined event, containing null.","title":"operatorleave"},{"location":"manual/consultant/chat/#sendmessage","text":"The event is triggered when receiving a chat message. It can be a message from the chat operator, system message or message from the customer sent from the other website page. sendmessage event features: Object, containing the following fields: text - message text. date - Unixtime message sending time. source - message sender. Possible values: Operator , Visitor , System . from - operator name if the message was sent by an operator. In other cases, the value of from is equal to source . chat_id - id of a chat, a message belongs to. message_id - message unique id. uid - temporary id, used to synchronize sent and received messages.","title":"sendmessage"},{"location":"manual/consultant/chat/#showchatretentionaction","text":"An event occurs when you need to show an alternative communication button in the chat. showchatretentionaction event features: Object, containing the field: alternate_communication_way - alternative communication mnemonics. Mnemonics possible values: offline_message - application form. sitephone - call form. chat - group choice form.","title":"showchatretentionaction"},{"location":"manual/consultant/chat/#chatavailabilitychange","text":"The event occurs in the following situations: There are no PMO operators online, in this case the value false returns in the event. There is at least one operator online, in this case the value true returns.","title":"chatavailabilitychange"},{"location":"manual/consultant/chat/#invite","text":"The event occurs when an operator invites a visitor to the chat, or when the auto-invite function is activated. invite event features: invite_message - the message to be displayed when inviting.","title":"invite"},{"location":"manual/consultant/chat/#startchat_1","text":"Event occurs in response to the command chat.startChat()","title":"startchat"},{"location":"manual/consultant/chat/#closechat_1","text":"Event occurs in response to the command chat.closeChat()","title":"closechat"},{"location":"manual/consultant/chat/#inviteaccept_1","text":"Event occurs in response to the command chat.inviteAccept()","title":"inviteaccept"},{"location":"manual/consultant/chat/#invitereject_1","text":"Event occurs in response to the command chat.inviteReject()","title":"invitereject"},{"location":"manual/consultant/chat/#setrating","text":"Event occurs in response to the command chat.setOperatorRating()","title":"setrating"},{"location":"manual/consultant/chat/#sendchatbymail","text":"Event occurs in response to the command chat.sendChatByMail()","title":"sendchatbymail"},{"location":"manual/consultant/chat/#ratingchange","text":"The event occurs when operator's rating is changed. ratingchange event features: The number corresponding to the operator\u2019s rating in the current chat, or null if no rating exists.","title":"ratingchange"},{"location":"manual/consultant/chat/#statechange","text":"The event occurs when website visitor status changes. statechange event features: mnemonics corresponding to the visitor's new status. Possible values: available - visitor on the website not interacting with widgets. invite - visitor received an invitation to a chat. chat - visitor in talking to chat operator. lead - the form of the lead generator is displayed.","title":"statechange"},{"location":"manual/consultant/chat/#chattyping","text":"Event occurs when an operator types a message.","title":"chattyping"},{"location":"manual/consultant/cs_events/","text":"Events consultant consultant:get_upload_url consultant_chat:send_message consultant_chat:show_chat_retention_action consultant_chat:show_history consultant_chat:invite consultant_chat:invite consultant:get_vcard consultant:get_operator_vcard consultant_chat:operator_joined consultant:start_chat consultant_chat:message_received consultant_chat:close_chat consultant_chat:invite_accept consultant_chat:invite_reject consultant_chat:set_rating consultant_chat:get_rating consultant_chat:send_chat_by_email consultant_sitephone:sitephone_call consultant_offline_message:send_offline_request consultant_chat:get_upload_url consultant_chat:invite consultant_chat:state_change consultant_chat:invite consultant_chat:send_message sitephone sitephone:callcomplete lead lead:${response.result['action_log_id']}:lead_submit lead:lead_cancel lead:${answer['action_log_id']}:hide","title":"Events"},{"location":"manual/consultant/cs_events/#events","text":"","title":"Events"},{"location":"manual/consultant/cs_events/#consultant","text":"consultant:get_upload_url consultant_chat:send_message consultant_chat:show_chat_retention_action consultant_chat:show_history consultant_chat:invite consultant_chat:invite consultant:get_vcard consultant:get_operator_vcard consultant_chat:operator_joined consultant:start_chat consultant_chat:message_received consultant_chat:close_chat consultant_chat:invite_accept consultant_chat:invite_reject consultant_chat:set_rating consultant_chat:get_rating consultant_chat:send_chat_by_email consultant_sitephone:sitephone_call consultant_offline_message:send_offline_request consultant_chat:get_upload_url consultant_chat:invite consultant_chat:state_change consultant_chat:invite consultant_chat:send_message","title":"consultant"},{"location":"manual/consultant/cs_events/#sitephone","text":"sitephone:callcomplete","title":"sitephone"},{"location":"manual/consultant/cs_events/#lead","text":"lead:${response.result['action_log_id']}:lead_submit lead:lead_cancel lead:${answer['action_log_id']}:hide","title":"lead"},{"location":"manual/consultant/offline_message/","text":"Application from website ViewController For a consultant to work, you need to register a ViewController with the name consultant . Important: ViewController is registered once for all the online consultant forms CreateWidget To create a chat widget, you need to call the method CallGear.UI.createWidget() with the following parameters: widgetName = 'consultant_offline_message' Example CallGear.UI.registerViewController('consultant', function (settings, tpls) { ... var consultantOfflineMessage = CallGear.UI.createWidget('consultant_offline_message', { settings: settings, template: tpls['consultant_offline_message'], ... }); ... consultantOfflineMessage.render(); }); Methods sendRequest(data) The method allows you to send requests with the specified fields. The data object may contain the following features: name - visitor name. email - visitor e-mail. phone - visitor phone number. message - application text. group_id - ID of an employees group to which this application should be distributed. The field must be filled in if the option \"Distribution of applications by employee groups\" is activated in the application settings. Events sendofflinerequest The event occurs after application is sent. It allows you to find out if the sending was successful. sendofflinerequest event features: object containing the following fields: success - true , if a call was requested, false , if an error accured. info - an object containing text fields title and message to display the message to a website visitor.","title":"Inquiry"},{"location":"manual/consultant/offline_message/#application-from-website","text":"","title":"Application from website"},{"location":"manual/consultant/offline_message/#viewcontroller","text":"For a consultant to work, you need to register a ViewController with the name consultant . Important: ViewController is registered once for all the online consultant forms","title":"ViewController"},{"location":"manual/consultant/offline_message/#createwidget","text":"To create a chat widget, you need to call the method CallGear.UI.createWidget() with the following parameters: widgetName = 'consultant_offline_message'","title":"CreateWidget"},{"location":"manual/consultant/offline_message/#example","text":"CallGear.UI.registerViewController('consultant', function (settings, tpls) { ... var consultantOfflineMessage = CallGear.UI.createWidget('consultant_offline_message', { settings: settings, template: tpls['consultant_offline_message'], ... }); ... consultantOfflineMessage.render(); });","title":"Example"},{"location":"manual/consultant/offline_message/#methods","text":"","title":"Methods"},{"location":"manual/consultant/offline_message/#sendrequestdata","text":"The method allows you to send requests with the specified fields. The data object may contain the following features: name - visitor name. email - visitor e-mail. phone - visitor phone number. message - application text. group_id - ID of an employees group to which this application should be distributed. The field must be filled in if the option \"Distribution of applications by employee groups\" is activated in the application settings.","title":"sendRequest(data)"},{"location":"manual/consultant/offline_message/#events","text":"","title":"Events"},{"location":"manual/consultant/offline_message/#sendofflinerequest","text":"The event occurs after application is sent. It allows you to find out if the sending was successful. sendofflinerequest event features: object containing the following fields: success - true , if a call was requested, false , if an error accured. info - an object containing text fields title and message to display the message to a website visitor.","title":"sendofflinerequest"},{"location":"manual/consultant/sitephone/","text":"Callback ViewController In order for a consultant to work, you need to register a ViewController with the name consultant . Important: ViewController is registered once for all the online consultant forms CreateWidget To create a callback widget, you need to call the method CallGear.UI.createWidget() with the following parameters: widgetName = 'consultant_sitephone' Example CallGear.UI.registerViewController('consultant', function (settings, tpls) { ... var consultantSipehone = CallGear.UI.createWidget('consultant_sitephone', { settings: settings, template: tpls['consultant_sitephone'], ... }); ... consultantSipehone.render(); }); Method startCall(data) This method initiates requesting a call to a specified number. The data object may contain the following features: phone - a phone number, that's been dialed. This is a required field. captcha_key - captcha key, received from a server. You need to fill in this field, only if captcha is enabled in the sitephone settings. captcha_value - captcha value entered by a visitor. The field needs to be filled in only if captcha is enabled in the sitephone settings. group_id - ID of the operator group with which to connect a website visitor. This field should be filled in if the option \"Process call in accordance with the selected group on the widget\" is selected in the callback setting of the processing method delayed_call_time - Parameter to make a delayed call. Set in the format n ms, UTC. Events sitephonecall The event occurs after a call is requested. It allows you to find out if the call request was successful. sitephonecall event reatures: object containing the following fields: success - true , if the call was requested, false , if an error accured info - an object containing text fields title and message to display the message to a website visitor.","title":"Callback"},{"location":"manual/consultant/sitephone/#callback","text":"","title":"Callback"},{"location":"manual/consultant/sitephone/#viewcontroller","text":"In order for a consultant to work, you need to register a ViewController with the name consultant . Important: ViewController is registered once for all the online consultant forms","title":"ViewController"},{"location":"manual/consultant/sitephone/#createwidget","text":"To create a callback widget, you need to call the method CallGear.UI.createWidget() with the following parameters: widgetName = 'consultant_sitephone'","title":"CreateWidget"},{"location":"manual/consultant/sitephone/#example","text":"CallGear.UI.registerViewController('consultant', function (settings, tpls) { ... var consultantSipehone = CallGear.UI.createWidget('consultant_sitephone', { settings: settings, template: tpls['consultant_sitephone'], ... }); ... consultantSipehone.render(); });","title":"Example"},{"location":"manual/consultant/sitephone/#method","text":"","title":"Method"},{"location":"manual/consultant/sitephone/#startcalldata","text":"This method initiates requesting a call to a specified number. The data object may contain the following features: phone - a phone number, that's been dialed. This is a required field. captcha_key - captcha key, received from a server. You need to fill in this field, only if captcha is enabled in the sitephone settings. captcha_value - captcha value entered by a visitor. The field needs to be filled in only if captcha is enabled in the sitephone settings. group_id - ID of the operator group with which to connect a website visitor. This field should be filled in if the option \"Process call in accordance with the selected group on the widget\" is selected in the callback setting of the processing method delayed_call_time - Parameter to make a delayed call. Set in the format n ms, UTC.","title":"startCall(data)"},{"location":"manual/consultant/sitephone/#events","text":"","title":"Events"},{"location":"manual/consultant/sitephone/#sitephonecall","text":"The event occurs after a call is requested. It allows you to find out if the call request was successful. sitephonecall event reatures: object containing the following fields: success - true , if the call was requested, false , if an error accured info - an object containing text fields title and message to display the message to a website visitor.","title":"sitephonecall"},{"location":"manual/lead/call_generator/","text":"Call generator ViewController In order for a generator form to work, you need to register a ViewController with the call_generator CreateWidget To create a call generator widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'call_generator' the config object must contain the field id Example: CallGear.UI.registerViewController('call_generator', function (settings, tpls) { var callGenerator = CallGear.UI.createWidget('call_generator', { settings: settings, template: tpls['call_generator'], id: settings['id'] }); callGenerator.render(); }); Method submit(data) The method captures a successful display of a form and initiates a call request. In the lead generation report, such impression will be considered as a lead. The data object should contain the following fields phone - a line containing 11 digits of the phone number which will receive a call. group_id - ID of an operator group to which this call will be transferred. The field must be filled in if the call generator is configured to select a group of operators. delayed_call_time - parameter to make a delayed call. Set in the format n ms, UTC. cancel() Method captures unsuccessful displays of a form. In the lead generation report, such impression will be considered a failure. Events leadhide The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once. leadsubmit The event occurs in response to a call to the submit () method and confirms that the lead has been processed. leadcancel The event occurs in response to a call to the cancel() method and confirms that a failure from a visitor has been captured. Sandbox Desktop, tablet: Mobile:","title":"Call Generator"},{"location":"manual/lead/call_generator/#call-generator","text":"","title":"Call generator"},{"location":"manual/lead/call_generator/#viewcontroller","text":"In order for a generator form to work, you need to register a ViewController with the call_generator","title":"ViewController"},{"location":"manual/lead/call_generator/#createwidget","text":"To create a call generator widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'call_generator' the config object must contain the field id","title":"CreateWidget"},{"location":"manual/lead/call_generator/#example","text":"CallGear.UI.registerViewController('call_generator', function (settings, tpls) { var callGenerator = CallGear.UI.createWidget('call_generator', { settings: settings, template: tpls['call_generator'], id: settings['id'] }); callGenerator.render(); });","title":"Example:"},{"location":"manual/lead/call_generator/#method","text":"","title":"Method"},{"location":"manual/lead/call_generator/#submitdata","text":"The method captures a successful display of a form and initiates a call request. In the lead generation report, such impression will be considered as a lead. The data object should contain the following fields phone - a line containing 11 digits of the phone number which will receive a call. group_id - ID of an operator group to which this call will be transferred. The field must be filled in if the call generator is configured to select a group of operators. delayed_call_time - parameter to make a delayed call. Set in the format n ms, UTC.","title":"submit(data)"},{"location":"manual/lead/call_generator/#cancel","text":"Method captures unsuccessful displays of a form. In the lead generation report, such impression will be considered a failure.","title":"cancel()"},{"location":"manual/lead/call_generator/#events","text":"","title":"Events"},{"location":"manual/lead/call_generator/#leadhide","text":"The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once.","title":"leadhide"},{"location":"manual/lead/call_generator/#leadsubmit","text":"The event occurs in response to a call to the submit () method and confirms that the lead has been processed.","title":"leadsubmit"},{"location":"manual/lead/call_generator/#leadcancel","text":"The event occurs in response to a call to the cancel() method and confirms that a failure from a visitor has been captured.","title":"leadcancel"},{"location":"manual/lead/call_generator/#sandbox","text":"","title":"Sandbox"},{"location":"manual/lead/call_generator/#desktop-tablet","text":"","title":"Desktop, tablet:"},{"location":"manual/lead/call_generator/#mobile","text":"","title":"Mobile:"},{"location":"manual/lead/form/","text":"Plugin form Adds methods and widget fields validation to the widget. Field management attributes c-type = field || numberfield (filters the input characters, the getValues \u200b\u200bmethod for this field only returns numbers); c-name = - field name; c-validator = phone || email || required - Optional attribute. Multiple validators can be specified divided by a space; c-length = - Optional attribute. Includes validation by the length of the value; c-mask = - Optional attribute. Adds a mask where input characters are masked by _ Widget methods getValues() = { : , ...} - returns field values; getErrors() - { : , ...} || null - returns information about fields that failed validation, or null. Usage example html <input c-mask=\"+7 (___) ___-__-__\" c-name=\"phone\" c-type=\"numberfield\" c-validator=\"required phone\"> javascript widget.getErrors(); // {phone: 'required'} widget.getValues(); // {phone: '78000000000'} Plugin center Center the widget horizontally / vertically. Plugin management attributes c-center = x || y || xy; c-center-height = - Optional attribute. When aligning a widget, you need to take the maximum - the actual height of the widget or c-center-height (necessary if the hidden widget has an incorrect height). Usage example html <div c-center=\"xy\" c-center-height=\"420\"> </div> Plugin draggable Allows you to move a widget around the page. Plugin management attributes c-draggable = x || y || xy; c-draggable-hpadding = - Optional attribute. Horizontal padding. The widget should not cross it; c-draggable-vpadding = - Optional attribute. Vertical padding. The widget should not cross it; c-dragger = \"true\" - Is added to drag-and-drop items to change their location on the page. Widget events dragend = (widget, {left, right, top, bottom}). Usage example html <div c-draggable=\"xy\" c-draggable-hpadding=\"40\" c-draggable-vpadding=\"40\"> <div c-dragger=\"true\"></div> </div> javascript widget.on('dragend', function (widget, position) { /* ** */ }); Plugin resizable Allows you to change the height of a widget. Plugin management attributes c-resizer = \"true\"- It is added to elements which you can use to drag the widget to resize; c-resizer-vpadding = <number> - Optional attribute. Optional attribute. Vertical padding. The widget should not cross it. Widget events resizeend = (widget, height) Usage example html <div c-resizer=\"true\" c-resizer-vpadding=\"40\"> </div> javascript widget.on('resizeend', function (widget, height) { /* ** */ }); Plugin slimscroll Adds a stylized scroll. Plugin management attributes c-slim-scroll = \"true\" Usage example <div c-slim-scroll=\"true\"> </div>","title":"Plugin form"},{"location":"manual/lead/form/#plugin-form","text":"Adds methods and widget fields validation to the widget.","title":"Plugin form"},{"location":"manual/lead/form/#field-management-attributes","text":"c-type = field || numberfield (filters the input characters, the getValues \u200b\u200bmethod for this field only returns numbers); c-name = - field name; c-validator = phone || email || required - Optional attribute. Multiple validators can be specified divided by a space; c-length = - Optional attribute. Includes validation by the length of the value; c-mask = - Optional attribute. Adds a mask where input characters are masked by _","title":"Field management attributes"},{"location":"manual/lead/form/#widget-methods","text":"getValues() = { : , ...} - returns field values; getErrors() - { : , ...} || null - returns information about fields that failed validation, or null.","title":"Widget methods"},{"location":"manual/lead/form/#usage-example","text":"html <input c-mask=\"+7 (___) ___-__-__\" c-name=\"phone\" c-type=\"numberfield\" c-validator=\"required phone\"> javascript widget.getErrors(); // {phone: 'required'} widget.getValues(); // {phone: '78000000000'}","title":"Usage example"},{"location":"manual/lead/form/#plugin-center","text":"Center the widget horizontally / vertically.","title":"Plugin center"},{"location":"manual/lead/form/#plugin-management-attributes","text":"c-center = x || y || xy; c-center-height = - Optional attribute. When aligning a widget, you need to take the maximum - the actual height of the widget or c-center-height (necessary if the hidden widget has an incorrect height).","title":"Plugin management attributes"},{"location":"manual/lead/form/#usage-example_1","text":"html <div c-center=\"xy\" c-center-height=\"420\"> </div>","title":"Usage example"},{"location":"manual/lead/form/#plugin-draggable","text":"Allows you to move a widget around the page.","title":"Plugin draggable"},{"location":"manual/lead/form/#plugin-management-attributes_1","text":"c-draggable = x || y || xy; c-draggable-hpadding = - Optional attribute. Horizontal padding. The widget should not cross it; c-draggable-vpadding = - Optional attribute. Vertical padding. The widget should not cross it; c-dragger = \"true\" - Is added to drag-and-drop items to change their location on the page.","title":"Plugin management attributes"},{"location":"manual/lead/form/#widget-events","text":"dragend = (widget, {left, right, top, bottom}).","title":"Widget events"},{"location":"manual/lead/form/#usage-example_2","text":"html <div c-draggable=\"xy\" c-draggable-hpadding=\"40\" c-draggable-vpadding=\"40\"> <div c-dragger=\"true\"></div> </div> javascript widget.on('dragend', function (widget, position) { /* ** */ });","title":"Usage example"},{"location":"manual/lead/form/#plugin-resizable","text":"Allows you to change the height of a widget.","title":"Plugin resizable"},{"location":"manual/lead/form/#plugin-management-attributes_2","text":"c-resizer = \"true\"- It is added to elements which you can use to drag the widget to resize; c-resizer-vpadding = <number> - Optional attribute. Optional attribute. Vertical padding. The widget should not cross it.","title":"Plugin management attributes"},{"location":"manual/lead/form/#widget-events_1","text":"resizeend = (widget, height)","title":"Widget events"},{"location":"manual/lead/form/#usage-example_3","text":"html <div c-resizer=\"true\" c-resizer-vpadding=\"40\"> </div> javascript widget.on('resizeend', function (widget, height) { /* ** */ });","title":"Usage example"},{"location":"manual/lead/form/#plugin-slimscroll","text":"Adds a stylized scroll.","title":"Plugin slimscroll"},{"location":"manual/lead/form/#plugin-management-attributes_3","text":"c-slim-scroll = \"true\"","title":"Plugin management attributes"},{"location":"manual/lead/form/#usage-example_4","text":"<div c-slim-scroll=\"true\"> </div>","title":"Usage example"},{"location":"manual/lead/offline_message_generator/","text":"Application generator ViewController In order for a generator form to work, you need to register a ViewController with the offline_message_generator CreateWidget To create an application generator widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'offline_message_generator' the config object must contain the field id Example: CallGear.UI.registerViewController('offline_message_generator', function (settings, tpls) { var offlineMessageGenerator = CallGear.UI.createWidget('offline_message_generator', { settings: settings, template: tpls['offline_message_generator'], id: settings['id'] }); offlineMessageGenerator.render(); }); Methods submit(data) The method captures a successful display of a form and saves the data received from the application. In the lead generation report, such impression will be considered as a lead. The data object should contain the following fields: name - Visitor name. email - Visitor e-mail. phone - Visitor phone number. message - Application text. group_id - ID of an employees group to which this application should apply. The field must be filled in if the application generator is configured to distribute applications by groups of employees. cancel() Method captures unsuccessful displays of a form. In the lead generation report, such impression will be considered a failure. Sending applications. Events leadhide The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once. leadsubmit The event occurs in response to a call to the submit () method and confirms that the lead has been processed. leadcancel The event occurs in response to a call to the cancel() method and confirms that a failure from a visitor has been captured. Sandbox Desktop, tablet: Mobile:","title":"Offline Message Generator"},{"location":"manual/lead/offline_message_generator/#application-generator","text":"","title":"Application generator"},{"location":"manual/lead/offline_message_generator/#viewcontroller","text":"In order for a generator form to work, you need to register a ViewController with the offline_message_generator","title":"ViewController"},{"location":"manual/lead/offline_message_generator/#createwidget","text":"To create an application generator widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'offline_message_generator' the config object must contain the field id","title":"CreateWidget"},{"location":"manual/lead/offline_message_generator/#example","text":"CallGear.UI.registerViewController('offline_message_generator', function (settings, tpls) { var offlineMessageGenerator = CallGear.UI.createWidget('offline_message_generator', { settings: settings, template: tpls['offline_message_generator'], id: settings['id'] }); offlineMessageGenerator.render(); });","title":"Example:"},{"location":"manual/lead/offline_message_generator/#methods","text":"","title":"Methods"},{"location":"manual/lead/offline_message_generator/#submitdata","text":"The method captures a successful display of a form and saves the data received from the application. In the lead generation report, such impression will be considered as a lead. The data object should contain the following fields: name - Visitor name. email - Visitor e-mail. phone - Visitor phone number. message - Application text. group_id - ID of an employees group to which this application should apply. The field must be filled in if the application generator is configured to distribute applications by groups of employees.","title":"submit(data)"},{"location":"manual/lead/offline_message_generator/#cancel","text":"Method captures unsuccessful displays of a form. In the lead generation report, such impression will be considered a failure. Sending applications.","title":"cancel()"},{"location":"manual/lead/offline_message_generator/#events","text":"","title":"Events"},{"location":"manual/lead/offline_message_generator/#leadhide","text":"The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once.","title":"leadhide"},{"location":"manual/lead/offline_message_generator/#leadsubmit","text":"The event occurs in response to a call to the submit () method and confirms that the lead has been processed.","title":"leadsubmit"},{"location":"manual/lead/offline_message_generator/#leadcancel","text":"The event occurs in response to a call to the cancel() method and confirms that a failure from a visitor has been captured.","title":"leadcancel"},{"location":"manual/lead/offline_message_generator/#sandbox","text":"","title":"Sandbox"},{"location":"manual/lead/offline_message_generator/#desktop-tablet","text":"","title":"Desktop, tablet:"},{"location":"manual/lead/offline_message_generator/#mobile","text":"","title":"Mobile:"},{"location":"manual/lead/personal_form/","text":"Personal form ViewController In order for a personal form to work, you need to register a ViewController with the name personal_form CreateWidget To create a personal form widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'personal_form' the config object must contain the field id Example: CallGear.UI.registerViewController('personal_form', function (settings, tpls) { var personalForm = CallGear.UI.createWidget('personal_form', { settings: settings, template: tpls['personal_form'], id: settings['id'] }); personalForm.render(); }); Methods submit() The method captures a successful display of a form and saves the data received from the application. In the lead generation report, such impression will be considered as a lead. Important: the method does not initiate clicking the link, specified in the settings. A visitor\u2019s transition to a new page must be done independently. If the transition is done without opening a new tab, it is advisable to make a transition in the leadsubmit event processor so that leaving the current page does not interfere with the submit method. Otherwise, the display of the form will not be recorded as successful and will not be displayed in statistics. cancel() The method captures a display of a form as unsuccessful. In the lead generation report, such an impression is considered a failure. Events leadhide The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once. leadsubmit The event occurs in response to the submit () method and confirms that the lead has been processed. leadcancel The event occurs in response to the cancel() method and confirms that the visitor\u2019s rejection has been captured. Sandbox Desktop, tablet: Mobile:","title":"Personal Form"},{"location":"manual/lead/personal_form/#personal-form","text":"","title":"Personal form"},{"location":"manual/lead/personal_form/#viewcontroller","text":"In order for a personal form to work, you need to register a ViewController with the name personal_form","title":"ViewController"},{"location":"manual/lead/personal_form/#createwidget","text":"To create a personal form widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'personal_form' the config object must contain the field id","title":"CreateWidget"},{"location":"manual/lead/personal_form/#example","text":"CallGear.UI.registerViewController('personal_form', function (settings, tpls) { var personalForm = CallGear.UI.createWidget('personal_form', { settings: settings, template: tpls['personal_form'], id: settings['id'] }); personalForm.render(); });","title":"Example:"},{"location":"manual/lead/personal_form/#methods","text":"","title":"Methods"},{"location":"manual/lead/personal_form/#submit","text":"The method captures a successful display of a form and saves the data received from the application. In the lead generation report, such impression will be considered as a lead. Important: the method does not initiate clicking the link, specified in the settings. A visitor\u2019s transition to a new page must be done independently. If the transition is done without opening a new tab, it is advisable to make a transition in the leadsubmit event processor so that leaving the current page does not interfere with the submit method. Otherwise, the display of the form will not be recorded as successful and will not be displayed in statistics.","title":"submit()"},{"location":"manual/lead/personal_form/#cancel","text":"The method captures a display of a form as unsuccessful. In the lead generation report, such an impression is considered a failure.","title":"cancel()"},{"location":"manual/lead/personal_form/#events","text":"","title":"Events"},{"location":"manual/lead/personal_form/#leadhide","text":"The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once.","title":"leadhide"},{"location":"manual/lead/personal_form/#leadsubmit","text":"The event occurs in response to the submit () method and confirms that the lead has been processed.","title":"leadsubmit"},{"location":"manual/lead/personal_form/#leadcancel","text":"The event occurs in response to the cancel() method and confirms that the visitor\u2019s rejection has been captured.","title":"leadcancel"},{"location":"manual/lead/personal_form/#sandbox","text":"","title":"Sandbox"},{"location":"manual/lead/personal_form/#desktop-tablet","text":"","title":"Desktop, tablet:"},{"location":"manual/lead/personal_form/#mobile","text":"","title":"Mobile:"},{"location":"manual/plugins/js_manual_personal_form/","text":"Personal form ViewController In order for a personal form to work, you need to register a ViewController with the name personal_form CreateWidget To create a personal form widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'personal_form' the config object must contain the field id Example: CallGear.UI.registerViewController('personal_form', function (settings, tpls) { var personalForm = CallGear.UI.createWidget('personal_form', { settings: settings, template: tpls['personal_form'], id: settings['id'] }); personalForm.render(); }); Methods submit() The method captures a successful display of a form and saves the data received from the application. In the lead generation report, such impression will be considered as a lead. Important: the method does not initiate clicking the link, specified in the settings. A visitor\u2019s transition to a new page must be done independently. If the transition is done without opening a new tab, it is advisable to make a transition in the leadsubmit event processor so that leaving the current page does not interfere with the submit method. Otherwise, the display of the form will not be recorded as successful and will not be displayed in statistics. cancel() The method captures a display of a form as unsuccessful. In the lead generation report, such an impression is considered a failure. \u0421\u043e\u0431\u044b\u0442\u0438\u044f leadhide The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once. leadsubmit The event occurs in response to the submit () method and confirms that the lead has been processed. leadcancel The event occurs in response to the cancel() method and confirms that the visitor\u2019s rejection has been captured. Sandbox Desktop, tablet: Mobile:","title":"Personal form"},{"location":"manual/plugins/js_manual_personal_form/#personal-form","text":"","title":"Personal form"},{"location":"manual/plugins/js_manual_personal_form/#viewcontroller","text":"In order for a personal form to work, you need to register a ViewController with the name personal_form","title":"ViewController"},{"location":"manual/plugins/js_manual_personal_form/#createwidget","text":"To create a personal form widget, use the method CallGear.UI.createWidget() with the following parameters: widgetName = 'personal_form' the config object must contain the field id","title":"CreateWidget"},{"location":"manual/plugins/js_manual_personal_form/#example","text":"CallGear.UI.registerViewController('personal_form', function (settings, tpls) { var personalForm = CallGear.UI.createWidget('personal_form', { settings: settings, template: tpls['personal_form'], id: settings['id'] }); personalForm.render(); });","title":"Example:"},{"location":"manual/plugins/js_manual_personal_form/#methods","text":"","title":"Methods"},{"location":"manual/plugins/js_manual_personal_form/#submit","text":"The method captures a successful display of a form and saves the data received from the application. In the lead generation report, such impression will be considered as a lead. Important: the method does not initiate clicking the link, specified in the settings. A visitor\u2019s transition to a new page must be done independently. If the transition is done without opening a new tab, it is advisable to make a transition in the leadsubmit event processor so that leaving the current page does not interfere with the submit method. Otherwise, the display of the form will not be recorded as successful and will not be displayed in statistics.","title":"submit()"},{"location":"manual/plugins/js_manual_personal_form/#cancel","text":"The method captures a display of a form as unsuccessful. In the lead generation report, such an impression is considered a failure.","title":"cancel()"},{"location":"manual/plugins/js_manual_personal_form/#_1","text":"","title":"\u0421\u043e\u0431\u044b\u0442\u0438\u044f"},{"location":"manual/plugins/js_manual_personal_form/#leadhide","text":"The event occurs when you need to hide the previously shown form. This is necessary if a visitor interacts with several pages of the website at once.","title":"leadhide"},{"location":"manual/plugins/js_manual_personal_form/#leadsubmit","text":"The event occurs in response to the submit () method and confirms that the lead has been processed.","title":"leadsubmit"},{"location":"manual/plugins/js_manual_personal_form/#leadcancel","text":"The event occurs in response to the cancel() method and confirms that the visitor\u2019s rejection has been captured.","title":"leadcancel"},{"location":"manual/plugins/js_manual_personal_form/#sandbox","text":"","title":"Sandbox"},{"location":"manual/plugins/js_manual_personal_form/#desktop-tablet","text":"","title":"Desktop, tablet:"},{"location":"manual/plugins/js_manual_personal_form/#mobile","text":"","title":"Mobile:"}]}